{"docstore/data":{"80f17682-6ee3-4c21-951b-e3fdb3c1f5dd":{"__data__":"{\"id_\":\"80f17682-6ee3-4c21-951b-e3fdb3c1f5dd\",\"metadata\":{\"url\":\"https://docs-link.nash.io/\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{},\"text\":\"Introduction – Nash Link API Documentation\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n        NAV\\n        \\n\\n\\n\\n\\n\\nTypeScript\\nPHP\\nPython\\nShell\\n\\n\\n\\n\\n\\n\\n\\nIntroduction\\n\\nInvoice\\nPayment sequence\\nInvoice states\\nErrors\\nActivating API Access\\nOur SDKs\\nE-commerce\\nRest API Access\\n\\n\\n\\nSDKs\\n\\nCreate a invoice\\nGet a invoice\\n\\n\\n\\nE-Commerce Plugins\\n\\nMagento 2\\nWooCommerce\\nPrestashop\\n\\n\\n\\nRest API\\n\\nAPI URLs\\nRequest headers\\nSigning requests\\nCreate an invoice\\nGet an invoice\\nInvoice webhooks\\nSetup a webhook endpoint\\nReceiving webhook data\\nTrigger webhook\\n\\n\\n\\n\\n\\n\\n\\nNash Link API Documentation #\\nIntroduction #\\nThe Nash Link Payment Gateway API is designed for merchants that need full control over their customers’ shopping and checkout experience or for single person who wants to bill in crypto, receive in fiat.\\nThere are four interactions with the Nash Link service that this API enables:\\n● create an invoice\\n● fetch an invoice\\n● receive invoice status (via webhook call from nash link backend on each invoice status change)\\n● trigger a webhook\\nInvoice #\\nThe invoice is the main data structure for payments. When a user wants to pay with Nash Link, the merchant\\ncreates an invoice for the specified amount and can optionally include further fields, such as internal order ID, redirect URL and many others.\\n{\\n  \\\"facade\\\": \\\"merchant/invoice\\\",\\n  \\\"data\\\": {\\n    \\\"id\\\": \\\"JDBtJCFV\\\",\\n    \\\"status\\\": \\\"complete\\\",\\n    \\\"price\\\": 9,\\n    \\\"currency\\\": \\\"EUR\\\",\\n    \\\"itemDesc\\\": \\\"Item XYZ\\\",\\n    \\\"orderId\\\": \\\"10118\\\",\\n    \\\"posData\\\": \\\"tx46523\\\",\\n    \\\"invoiceTime\\\": 1588318118648,\\n    \\\"expirationTime\\\": 1588319018648,\\n    \\\"currentTime\\\": 1588325917427,\\n    \\\"paidOn\\\": 1588319018644,\\n    \\\"notificationEmail\\\": \\\"youremail@domain.com\\\",\\n    \\\"notificationURL\\\": \\\"https://yourredirecturl.com\\\",\\n    \\\"redirectURL\\\": \\\"https://yourwebsite.com/checkout/10118\\\",\\n    \\\"url\\\": \\\"https://link.nash.io/widget?invoiceId=JDBtJCFV\\\",\\n    \\\"transactionCurrency\\\": \\\"BTC\\\",\\n    \\\"amountPaid\\\": 92313,\\n    \\\"displayAmountPaid\\\": \\\"0.00092313\\\",\\n    \\\"exchangeRates\\\": {\\n      \\\"BTC\\\": {\\n        \\\"EUR\\\": 9749.44\\n      }\\n    },\\n    \\\"supportedTransactionCurrencies\\\": {\\n      \\\"BTC\\\": {\\n        \\\"enabled\\\": true\\n      }\\n    },\\n    \\\"paymentWalletAddress\\\": \\\"bc1qx2qyua0kjzyhza5y4x9lj7mghu39sm4d0sl226\\\",\\n    \\\"paymentWalletBlockchain\\\": \\\"BTC\\\",\\n    \\\"paymentCodes\\\": {\\n      \\\"BTC\\\": {\\n        \\\"BIP21\\\": \\\"bitcoin:bc1qx2qyua0kjzyhza5y4x9lj7mghu39sm4d0sl226?value=0.00092313\\\"\\n      }\\n    },\\n  }\\n}\\nData fields\\n\\n\\n\\nName\\nType\\nDescription\\n\\n\\n\\n\\nid\\nstring\\nID of this specific invoice\\n\\n\\nstatus\\nstring\\nnew / paid / complete / expired\\n\\n\\nprice\\nnumber\\nFiat amount of the invoice\\n\\n\\ncurrency\\nstring\\nFiat currency of the invoice\\n\\n\\nitemDesc\\nstring\\nMerchant-provided reference text about the items in this invoice\\n\\n\\norderId\\nstring\\nMerchant-provided reference ID\\n\\n\\nposData\\nstring\\nPassthru variable for Merchant internal use\\n\\n\\ninvoiceTime\\nnumber\\nTimestamp of when the invoice was created\\n\\n\\nexpirationTime\\nnumber\\nTimestamp of when the invoice will expire\\n\\n\\ncurrentTime\\nnumber\\nTimestamp of the API call retrieving this invoice\\n\\n\\npaidOn\\nnumber\\nTimestamp of when the invoice was paid\\n\\n\\nnotificationEmail\\nstring\\nEmail address of the merchant to receive notifications about invoice status changes\\n\\n\\nnotificationURL\\nstring\\nURL of the merchant backend to receive webhooks relating to invoice status changes\\n\\n\\nredirectURL\\nstring\\nMerchant-provided URL to redirect the user after a successful payment\\n\\n\\nurl\\nstring\\nWeb address of the invoice\\n\\n\\ntransactionCurrency\\nstring\\nSymbol of cryptocurrency the user paid with\\n\\n\\namountPaid\\nnumber\\nAmount the user paid, in smallest unit of the cryptocurrency (initially 0)\\n\\n\\ndisplayAmountPaid\\nstring\\nAmount the user paid, in full unit of the cryptocurrency (initially '0')\\n\\n\\nexchangeRates\\nobject\\nExchange rates for this invoice\\n\\n\\nsupportedTransactionCurrencies\\nobject\\nSupported cryptocurrencies to pay this invoice\\n\\n\\npaymentWalletAddress\\nstring\\nWallet address for payment\\n\\n\\npaymentWalletBlockchain\\nstring\\nWallet blockchain\\n\\n\\npaymentCodes\\nobject\\nURI for sending a transaction to the invoice\\n\\n\\n\\n\\nNote: Cryptocurrency amounts are always in the smallest unit of any specific currency (for instance, in case of Bitcoin, amounts are always denominated in satoshis).\\n\\nPayment sequence #\\nClick to enlarge:\\n\\n\\n\\nInvoice states #\\nA Nash Link invoice can be in one of the following states. After each state transition a webhook is sent to the merchant callback URL, as described here.\\nnew\\nAn invoice starts in the new state. Payments made to this invoice have a 20 minute window to be confirmed on the blockchain.\\npaid\\nAfter a payment was detected on the blockchain, an invoice is marked as paid. This is a transition state and the invoice will become either expired or complete.\\ncomplete\\nIf the full payment made to an invoice has been confirmed on the blockchain during the confirmation window, the invoice is marked as complete. The merchant will be credited the invoice amount on the next payout.\\nexpired\\nAn invoice is marked as expired if the payment wasn’t made in full or confirmed on the blockchain in time. All payments received will be automatically refunded.\\nSee also:\\n\\nInvoice webhooks\\n\\nErrors #\\nThe Nash Link API uses the following error codes:\\n\\n\\n\\nError Code\\nMeaning\\n\\n\\n\\n\\n400\\nBad Request – Your request sucks\\n\\n\\n401\\nUnauthorized – Your API key is incorrect\\n\\n\\n404\\nNot Found – The specified resource could not be found\\n\\n\\n500\\nInternal Server Error – We had a problem with our server – try again later\\n\\n\\n503\\nService Unavailable – We’re temporarially offline for maintanance – try again later\\n\\n\\n\\nActivating API Access #\\nThe merchant must obtain an API key from the Nash link web app to get access to the API calls.\\nThe API generation/revoke actions are accessible at https://link.nash.io/developers/.\\nA merchant can create multiple keys for use with different e-commerce stores or API functions.\\nOnce an API key has been created, Nash link will use this API key to authenticate your API connections.\\nThe merchant’s API key must remain private and should never be visible on any client-facing code.\\nShould it ever be compromised, the merchant can generate a new key in their Nash Link account.\\nOur SDKs #\\nWe provide well-maintained SDKs for several programming languages. These are a slim layer to simplify API access (in particular, request signing):\\n\\nNode.js / TypeScript\\nPHP\\nPython\\n\\nRead more\\nE-commerce #\\nWe also provide well-maintained plugins for some well-know ecommerce frameworks. The easiest way to start using Nash link if you have any of those ecommerce platforms.\\n\\nMagento 2\\nPrestashop\\nWoocommerce\\n\\nRead more\\nRest API Access #\\nNash link provides a standards-based REST interface which enables application developers to interact in a powerful, yet secure way with their Nash link account.\\nRead more\\nSDKs #\\nTo start using a SDK, simply download and follow instructions:\\n\\nNode.js / TypeScript\\nPHP\\nPython\\n\\nCreate a invoice #\\nCreating a invoice in a few lines of code.\\n\\nCreating an invoice with our SDK:\\n\\nimport { NashLinkApi } from '@neon-exchange/nash-link'\\n\\nconst api = new NashLinkApi('sandbox', `<YOUR_API_KEY>`, `<YOUR_API_SECRET_KEY>`)\\n\\n// create the invoice\\nconst invoiceResponse = await api.createInvoice({\\n  price: 10\\n  currency: 'EUR'\\n})\\n<?php\\nrequire_once 'NashLinkApi.php';\\n\\nuse Nash\\\\Link\\\\NashLinkApi;\\n\\n$api = new NashLinkApi('sandbox', '<YOUR_API_KEY>', '<YOUR_API_SECRET_KEY>');\\n$invoice_data = array(\\\"price\\\" => 10, \\\"currency\\\" => \\\"EUR\\\");\\n\\n// create the invoice\\n$response = $api->createInvoice($invoice_data);\\n\\n// check for errors\\nif ($response['error'] == true) {\\n  print $response['message'];\\n  print $response['status_code'];\\n  return;\\n}\\n\\n// created invoice data\\nvar_dump($response['data'])\\nfrom nashlink import nashlink\\n\\n# instantiate api\\n# use 'sandbox' for integration tests\\n# use 'prod' for final production environment\\nnashlink_api = nashlink.Api('sandbox', '<YOUR_API_KEY>', '<YOUR_API_SECRET_KEY>')\\n# setup order data for the invoice\\ninvoice = {'price': 10, 'currency': 'EUR'}\\n# create the invoice\\nresponse = nashlink_api.create_invoice(invoice)\\n\\n# check for errors\\nif response['error']:\\n    print(response['message'])\\n    print(response['status_code'])\\n    exit()\\n\\n# created invoice data\\nprint(str(response['data']))\\n# there is no shell sdk, use it for REST API access.\\n\\nReturns Invoice object or Error status/message\\n\\nGet a invoice #\\nGetting a invoice in a few lines of code.\\n\\nGetting an invoice data with our SDK:\\n\\nimport { NashLinkApi } from '@neon-exchange/nash-link'\\n\\nconst api = new NashLinkApi('sandbox', `<YOUR_API_KEY>`, `<YOUR_API_SECRET_KEY>`)\\nconst invoiceResponse = await api.getInvoice('<INVOICE_ID>')\\n<?php\\nrequire_once 'NashLinkApi.php';\\n\\nuse Nash\\\\Link\\\\NashLinkApi;\\n\\n$api = new NashLinkApi('sandbox', '<YOUR_API_KEY>', '<YOUR_API_SECRET_KEY>');\\n\\n// get the invoice\\n$response = $api->getInvoice('<INVOICE_ID>');\\n\\n// check for errors\\nif ($response['error'] == true) {\\n  print $response['message'];\\n  print $response['status_code'];\\n  return;\\n}\\n\\n// invoice data\\nvar_dump($response['data'])\\nfrom nashlink import nashlink\\n\\n# instantiate api\\n# use 'sandbox' for integration tests\\n# use 'prod' for final production environment\\nnashlink_api = nashlink.Api('sandbox', '<YOUR_API_KEY>', '<YOUR_API_SECRET_KEY>')\\n# get a invoice\\nresponse = nashlink_api.get_invoice('<INVOICE_ID>')\\n\\n# check for errors\\nif response['error']:\\n    print(response['message'])\\n    print(response['status_code'])\\n    exit()\\n\\n# invoice data\\nprint(str(response['data']))\\n# there is no shell sdk, use it for REST API access.\\n\\nReturns Invoice object or Error status/message\\n\\nE-Commerce Plugins #\\nThis section describes the installation of our payment plugin in various e-commerce solutions.\\nMagento 2 #\\nDownload Nashlink plugins and sdks zip pack.\\n\\nExtract the downloaded zip pack\\nThe plugin is at unziped folder plugin-magento2-checkout/Nashlink/\\n\\nYou need access to your magento instance for ssh and/or ftp.\\nAs first step you need to copy Nashlink/ plugin directory to magento code path. Most common ways are via FTP or SSH.\\nAfter that, connect via ssh or machine console to run magento install commands.\\nCopy Magento 2 plugin over FTP\\nAccess your magento instance via ftp and copy Nashlink/ plugin directory to <MAGENTO_BASE_PATH>/app/code/\\nCopy Magento 2 plugin over SSH\\n$ scp -r Nashlink <your_user>@<your_magento_ip>:<MAGENTO_BASE_PATH>/app/code/\\nInstall Magento 2 plugin\\nGet terminal access to your magento instance via ssh:\\n$ ssh <your_user>@<your_magento_ip>\\nAfter login, run the following commands inside magento instance:\\n$ bin/magento setup:upgrade\\n$ bin/magento module:enable Nashlink_NPCheckout\\n$ bin/magento setup:static-content:deploy -f\\n$ bin/magento cache:flush\\nActive Magento 2 plugin\\nYou can now activate Nashlink checkout plugin inside admin interface via Stores -> Configuration -> Sales-> Payment Methods\\nFollow the instructions on plugin configuration interface to get your store ready for Nashlink.\\nWooCommerce #\\nDownload Nashlink plugins and sdks zip pack.\\n\\nExtract the downloaded zip pack\\nThe plugin is at unziped folder plugin-woocommerce-checkout/nashlink/\\n\\nYou need access to your woocommerce wordpress instance for ssh and/or ftp.\\nManual Install\\nIt requires you first installs and configure WooCommerce plugin on your wordpress instance.\\nAfter get WooCommerce up and running you are able to install nashlink checkout.\\nDownload the latest nashlink woocomerce checkout distribution here nashlink woocommerce checkout\\nLog in on you woocommerce instance as admin. Go to Plugins -> Add New -> Browse -> woocommerce-nashlink.zip\\nAfter that, you can enable the plugin on admin interface(wordpress plugin and woocomerce payment choice).\\nYou can use the same process to update to newer versions.\\nPrestashop #\\nDownload the latest nashlink prestashop checkout distribution here nashlink prestashop checkout\\nLog in on you prestashop instance as admin. Go to Modules -> Module Manager -> Upload a module -> Select file -> prestashop-nashlink.zip\\nClick Install\\nConfigure\\nJust after finishing installing Nash Link module, you can click “configure” for the setup.\\nRest API #\\nNash link provides a standards-based REST interface which enables application developers to interact in a powerful, yet secure way with their Nash link account. Developers may call the API directly over HTTPS using the language of their choice, or take advantage of one of Nash link code libraries (Javascript, Python and PHP).\\nFor a shell environment we higly recommends curl, openssl and sed to sign requests.\\nAPI URLs #\\nThe Nash Link API base URLs are:\\n\\nhttps://link.nash.io/api/v1/sandbox for sandbox\\nhttps://link.nash.io/api/v1/prod for production\\n\\nNote: You need to use an API key created for the specific environment.\\nRequest headers #\\nAll authenticated requests need to include the following HTTP headers:\\n\\nx-identity: your API key\\nx-signature: the signature, as described here\\n\\nWe suggest you to use openssl for signatures since its opensource and widely avaliable over different operational systems.\\nSigning requests #\\n\\nSign you payload:\\n\\nimport * as crypto from 'crypto'\\n\\nconst apiSecretKey = '<YOUR_API_SECRET_KEY>'\\nconst environment = 'https://link.nash.io/api/v1/sandbox/invoices'\\n\\nconst invoice = {\\\"price\\\": 10, \\\"currency\\\": \\\"EUR\\\"}\\nconst payload = environment+JSON.stringify(invoice)\\nconst signature = crypto.createHmac(\\\"sha256\\\", apiSecretKey).update(payload).digest(\\\"hex\\\")\\n<?php\\nconst API_SECRET_KEY = '<YOUR_API_SECRET_KEY>';\\nconst ENVIRONMENT = 'https://link.nash.io/api/v1/sandbox/invoices';\\n\\n$invoice_data = array(\\\"price\\\" => 10, \\\"currency\\\" => \\\"EUR\\\");\\n$payload = ENVIRONMENT . json_encode($invoice_data)\\n$signature = hash_hmac('sha256', $payload, API_SECRET_KEY);\\nimport hmac\\nimport hashlib\\n\\nAPI_SECRET_KEY = '<YOUR_API_SECRET_KEY>';\\nENVIRONMENT = 'https://link.nash.io/api/v1/sandbox/invoices';\\n\\ninvoice = {'price': 10, 'currency': 'EUR'}\\npayload = ''.join([ENVIRONMENT,str(json.dumps(invoice))])\\nsignature = hmac.new(API_SECRET_KEY.encode('utf-8'), \\n                     msg=payload.encode('utf-8'),\\n                     digestmod=hashlib.sha256).hexdigest().upper()\\n#!/bin/sh\\nAPI_SECRET_KEY='<YOUR_API_SECRET_KEY>'\\nENVIRONMENT='https://link.nash.io/api/v1/sandbox/invoices'\\n\\nINVOICE='{\\\"price\\\": 10, \\\"currency\\\": \\\"EUR\\\"}'\\n# make use of openssl + sed\\nSIGNATURE=`echo -n \\\"${ENVIRONMENT}${INVOICE}\\\" | openssl dgst -sha256 -hmac \\\"${API_SECRET_KEY}\\\" | sed 's/(stdin)= //g'`\\nAuthenticated requests need to be signed with the API secret key. You need to concatenate the URL with the request body, create a HMAC-SHA256 signature, then send this as the x-signature header.\\nIf you use our SDKs you don’t need to sign requests manually.\\nFor example, say you wish to send a request to https://link.nash.io/api/v1/sandbox/invoices with this payload:\\n{ \\\"price\\\": 10, \\\"currency\\\": \\\"EUR\\\" }\\nYou’d concatenate the URL and request body like this:\\nhttps://link.nash.io/api/v1/sandbox/invoices{\\\"price\\\": 10, \\\"currency\\\": \\\"EUR\\\"}\\nThis string is then signed using HMAC-SHA256 and the API secret key.\\nThe resulting signature needs to be sent in the x-signature HTTP header.\\nCreate an invoice #\\n\\nCreate a Invoice with Rest call:\\n\\nimport * as crypto from 'crypto'\\n\\nconst apiKey = '<YOUR_API_KEY>'\\nconst apiSecretKey = '<YOUR_API_SECRET_KEY>'\\nconst environment = 'https://link.nash.io/api/v1/sandbox/invoices'\\n\\nconst invoice = {\\\"price\\\": 10, \\\"currency\\\": \\\"EUR\\\"}\\nconst payload = environment+JSON.stringify(invoice)\\nconst signature = crypto.createHmac(\\\"sha256\\\", apiSecretKey).update(payload).digest(\\\"hex\\\")\\n\\nconst headers = {\\n  'Accept': 'application/json';\\n  'Content-Type': 'application/json',\\n  'x-identity': apiKey,\\n  'x-signature': signature\\n}\\n\\nconst fetchPromise = fetch(environment, {\\n  method: 'post',\\n  body: JSON.stringify(data),\\n  headers\\n})\\n<?php\\nconst API_KEY = '<YOUR_API_KEY>';\\nconst API_SECRET_KEY = '<YOUR_API_SECRET_KEY>';\\nconst ENVIRONMENT = 'https://link.nash.io/api/v1/sandbox/invoices';\\n\\n$invoice_data = array(\\\"price\\\" => 10, \\\"currency\\\" => \\\"EUR\\\");\\n$payload = ENVIRONMENT . json_encode($invoice_data)\\n$signature = hash_hmac('sha256', $payload, API_SECRET_KEY);\\n\\n$request_headers = array();\\n$request_headers[] = 'Accept: application/json';\\n$request_headers[] = 'Content-Type: application/json';\\n$request_headers[] = 'x-identity: ' . API_KEY;\\n$request_headers[] = 'x-signature: ' . $signature;\\n\\n$ch = curl_init();\\ncurl_setopt($ch, CURLOPT_URL, ENVIRONMENT);\\ncurl_setopt($ch, CURLOPT_POST, 1);\\ncurl_setopt($ch, CURLOPT_POSTFIELDS, json_encode($invoice_data));\\ncurl_setopt($ch, CURLOPT_HTTPHEADER, $request_headers);\\ncurl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\\n$result = curl_exec($ch);\\n$status_code = curl_getinfo($ch, CURLINFO_HTTP_CODE);\\ncurl_close($ch);\\n        \\nimport hmac\\nimport hashlib\\n\\nAPI_KEY = '<YOUR_API_KEY>';\\nAPI_SECRET_KEY = '<YOUR_API_SECRET_KEY>';\\nENVIRONMENT = 'https://link.nash.io/api/v1/sandbox/invoices';\\n\\ninvoice = {'price': 10, 'currency': 'EUR'}\\npayload = ''.join([ENVIRONMENT,str(json.dumps(invoice))])\\nsignature = hmac.new(API_SECRET_KEY.encode('utf-8'), \\n                     msg=payload.encode('utf-8'),\\n                     digestmod=hashlib.sha256).hexdigest().upper()\\n\\nrequest_headers = {'Accept': 'application/json',\\n                   'Content-Type': 'application/json',\\n                   'x-identity': API_KEY,\\n                   'x-signature': signature}\\n\\nr = requests.post(url=ENVIRONMENT, headers=request_headers, json=invoice)\\n#!/bin/sh\\nAPI_KEY='<YOUR_API_KEY>'\\nAPI_SECRET_KEY='<YOUR_API_SECRET_KEY>'\\nENVIRONMENT='https://link.nash.io/api/v1/sandbox/invoices'\\n\\nINVOICE='{\\\"price\\\": 10, \\\"currency\\\": \\\"EUR\\\"}'\\n# make use of openssl + sed\\nSIGNATURE=`echo -n \\\"${ENVIRONMENT}${INVOICE}\\\" | openssl dgst -sha256 -hmac \\\"${API_SECRET_KEY}\\\" | sed 's/(stdin)= //g'`\\n\\ncurl \\\\\\n-H 'Accept: application/json' \\\\\\n-H 'Content-Type: application/json' \\\\\\n-H \\\"x-identity: ${API_KEY}\\\" \\\\\\n-H \\\"x-signature: ${SIGNATURE}\\\" \\\\\\n-X POST \\\\\\n-d \\\"$INVOICE\\\" \\\\\\n$ENVIRONMENT\\nPOST /invoices\\n\\nReturns Invoice object or Error status/message\\n\\nRequest headers\\n\\ncontent-type: application/json\\nx-identity: your API key\\nx-signature: the signature, as described here\\n\\nRequest body (JSON)\\nMandatory fields\\n\\n\\n\\nName\\nType\\nDescription\\n\\n\\n\\n\\nprice\\nnumber\\nAmount in fiat\\n\\n\\ncurrency\\nstring\\nFiat currency, in ISO 4217 3-character currency code. Must be EUR currently.\\n\\n\\n\\n\\nOptional fields\\n\\n\\n\\nName\\nType\\nDescription\\n\\n\\n\\n\\norderId\\nstring\\nMerchant order reference ID\\n\\n\\nitemDesc\\nstring\\nDescription of the purchase\\n\\n\\nposData\\nstring\\nPassthru variable for Merchant internal use\\n\\n\\nnotificationEmail\\nstring\\nEmail address of the merchant to receive notifications about invoice status changes\\n\\n\\nnotificationURL\\nstring\\nURL of the merchant backend to enable and receive webhooks relating to invoice status changes\\n\\n\\nredirectURL\\nstring\\nURL to redirect the user to after a successful purchase\\n\\n\\n\\nResponse\\nAn Invoice object as described in the Invoice object documentation.\\nGet an invoice #\\nGET /invoices/<invoiceId>\\nimport * as crypto from 'crypto'\\n\\nconst apiKey = '<YOUR_API_KEY>'\\nconst apiSecretKey = '<YOUR_API_SECRET_KEY>'\\nconst environment = 'https://link.nash.io/api/v1/sandbox/invoices/'\\n\\nconst invoiceId = '<INVOICE_ID>'\\nconst payload = environment+invoiceId\\nconst signature = crypto.createHmac(\\\"sha256\\\", apiSecretKey).update(payload).digest(\\\"hex\\\")\\n\\nconst headers = {\\n  'Accept': 'application/json';\\n  'Content-Type': 'application/json',\\n  'x-identity': apiKey,\\n  'x-signature': signature\\n}\\n\\nconst fetchPromise = fetch(environment+invoiceId, { headers })\\n<?php\\nconst API_KEY = '<YOUR_API_KEY>';\\nconst API_SECRET_KEY = '<YOUR_API_SECRET_KEY>';\\nconst ENVIRONMENT = 'https://link.nash.io/api/v1/sandbox/invoices/';\\n\\n$invoice_id = '<INVOICE_ID>';\\n$payload = ENVIRONMENT . invoice_id\\n$signature = hash_hmac('sha256', $payload, API_SECRET_KEY);\\n\\n$request_headers = array();\\n$request_headers[] = 'Accept: application/json';\\n$request_headers[] = 'Content-Type: application/json';\\n$request_headers[] = 'x-identity: ' . API_KEY;\\n$request_headers[] = 'x-signature: ' . $signature;\\n\\n$ch = curl_init();\\ncurl_setopt($ch, CURLOPT_URL, ENVIRONMENT . invoice_id);\\ncurl_setopt($ch, CURLOPT_HTTPHEADER, $request_headers);\\ncurl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\\n$result = curl_exec($ch);\\n$status_code = curl_getinfo($ch, CURLINFO_HTTP_CODE);\\ncurl_close($ch);\\n        \\nimport hmac\\nimport hashlib\\n\\nAPI_KEY = '<YOUR_API_KEY>';\\nAPI_SECRET_KEY = '<YOUR_API_SECRET_KEY>';\\nENVIRONMENT = 'https://link.nash.io/api/v1/sandbox/invoices/';\\n\\ninvoice_id = '<INVOICE_ID>'\\npayload = ''.join([ENVIRONMENT,invoice_id])\\nsignature = hmac.new(API_SECRET_KEY.encode('utf-8'), \\n                     msg=payload.encode('utf-8'),\\n                     digestmod=hashlib.sha256).hexdigest().upper()\\n\\nrequest_headers = {'Accept': 'application/json',\\n                   'Content-Type': 'application/json',\\n                   'x-identity': API_KEY,\\n                   'x-signature': signature}\\n\\nr = requests.get(url=''.join([ENVIRONMENT,invoice_id]), headers=request_headers)\\n#!/bin/sh\\nAPI_KEY='<YOUR_API_KEY>'\\nAPI_SECRET_KEY='<YOUR_API_SECRET_KEY>'\\nENVIRONMENT='https://link.nash.io/api/v1/sandbox/invoices/'\\n\\nINVOICE_ID='<INVOICE_ID>'\\n# make use of openssl + sed\\nSIGNATURE=`echo -n \\\"${ENVIRONMENT}${INVOICE_ID}\\\" | openssl dgst -sha256 -hmac \\\"${API_SECRET_KEY}\\\" | sed 's/(stdin)= //g'`\\n\\ncurl \\\\\\n-H 'Accept: application/json' \\\\\\n-H 'Content-Type: application/json' \\\\\\n-H \\\"x-identity: ${API_KEY}\\\" \\\\\\n-H \\\"x-signature: ${SIGNATURE}\\\" \\\\\\n${ENVIRONMENT}${INVOICE_ID}\\n\\nReturns Invoice object or Error status/message\\n\\nRequest headers\\n\\ncontent-type: application/json\\nx-identity: your API key\\nx-signature: the signature, as described here\\n\\nResponse\\nInvoice object as described in the Invoice object documentation\\nRequest headers\\n\\ncontent-type: application/json\\nx-identity: your API key\\nx-signature: the signature, as described here\\n\\nResponse\\nThe following JSON payload: { \\\"sent\\\": true }\\nInvoice webhooks #\\nAfter each invoice state transition, a POST request is sent to the notificationURL field provided when creating the invoice. No webhook is sent when the invoice is created.\\nIf a request fails, we retry the webhook up to 20 times, waiting 5min * attempt between retries.\\nYou can also manually trigger the latest webhook call for an invoice by calling the Trigger webhook endpoint.\\n\\nNote: To prevent eavesdropping, we recommend securing your callback URL by using SSL and providing a secret parameter appended to the callback URL. We send the payload to the unaltered URL, which allows you to check on your server that the parameter was not modified.\\n\\nSetup a webhook endpoint #\\nAt the creation of invoice, you can setup a webhook url so Nash link servers can callback your merchant server and inform about any invoice status update. To make use of this feature just set notificationURL param with you webhook endpoint.\\nReceiving webhook data #\\nWhen Nash link servers call you merchant webhook endpoint you will receive a Invoice object data\\nTrigger webhook #\\nGET /invoices/<invoiceId>/trigger_webhook\\nGET /invoices/JDBtJCFV/trigger_webhook\\n\\nResponse:\\n\\n{ \\\"sent\\\": true }\\nRequest headers\\n\\ncontent-type: application/json\\n\\nRequest body (JSON)\\nInvoice object as described in the Invoice object documentation\\nSee also:\\n\\nInvoice states\\n\\n\\n\\n\\nTypeScript\\nPHP\\nPython\\nShell\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"DOCUMENT\",\"hash\":\"Cvy5fq8v12XA21acg9ToJ5XhfVHW+BgChOA92W8ejtk=\"}","__type__":"DOCUMENT"},"1d3783fb-d720-48a8-8bd9-546203337d83":{"__data__":"{\"id_\":\"1d3783fb-d720-48a8-8bd9-546203337d83\",\"metadata\":{\"url\":\"https://docs.iban.nash.io/\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{},\"text\":\"nash iban API documentation\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n    nash iban\\n\\nShow Menu\\n\\n\\n\\n\\n\\n\\n\\nSearch…\\nCtrl+K\\n\\n\\n\\n\\n\\n\\n\\nESC\\n\\n\\n\\n\\n\\n\\n\\n\\nToggle dark mode\\n\\nAPI Changelog\\n\\n\\n\\n\\n              Download source\\n\\n      \\n\\n\\n\\n\\n\\nJSON OpenAPI specification\\n\\n\\nYAML OpenAPI specification\\n\\n\\n\\n\\n\\n\\nTopics\\n\\n\\nIntroduction\\n\\n\\nAuthentication\\n\\n\\nOnboarding\\n\\n\\nEndpoints\\n\\n\\n\\n    AISP\\n \\n\\n\\n    Retrieval of the PSU accounts\\n      GET\\n\\n\\n\\n    Retrieval of an account balances report\\n      GET\\n\\n\\n\\n    Retrieval of an account overdraft\\n      GET\\n\\n\\n\\n    Retrieval of an account owners\\n      GET\\n\\n\\n\\n    Retrieval of an account transaction set\\n      GET\\n\\n\\n\\n    Retrieval of transaction details\\n      GET\\n\\n\\n\\n    Forwarding the PSU consent\\n      PUT\\n\\n\\n\\n    Retrieval of the identity of the end-user\\n      GET\\n\\n\\n\\n    Retrieval of the trusted beneficiaries list\\n      GET\\n\\n\\n\\n\\n\\n    PISP\\n \\n\\n\\n    Request a payment\\n      POST\\n\\n\\n\\n\\n\\n    CBPII\\n \\n\\n\\n    Confirm funds\\n      POST\\n\\n\\n\\n\\n\\n    Token\\n \\n\\n\\n    Get access token\\n      GET\\n\\n\\n\\n\\n\\n\\n\\n\\n\\nPowered by Bump.sh\\n \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n  \\n        IBAN Interface\\n\\n 0.1\\n\\n\\n\\n\\n\\n        Base URL\\n\\n    \\n  \\n\\n\\n\\n\\nhttps://iban.nash.io\\n\\n\\n\\n\\nNash IBAN PSD2 API allows Third Party Providers to access account information and initiate payments on behalf of customers.\\nThe API follows PSD2 API V1.6 Guidelines. This document describe our implementation choices and where we have drifted away from the guidelines.\\nAll non-absolute paths described in this document are relatives to the base URL of the server (e.g. https://iban.nash.io for the production environment).\\n\\nThis is version 0.1 of this API documentation.\\n Last update on Jul 10, 2023.\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"DOCUMENT\",\"hash\":\"2sOsC1aKEydpK2HX+OVkoKrB/6Lvg1/8VnWFc0Wj7QI=\"}","__type__":"DOCUMENT"},"a769b651-2a48-46e4-a67b-229eb9964a96":{"__data__":"{\"id_\":\"a769b651-2a48-46e4-a67b-229eb9964a96\",\"metadata\":{\"url\":\"https://docs.iban.nash.io/group/endpoint-pisp\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{},\"text\":\"PISP | nash iban API documentation\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n    nash iban\\n\\nShow Menu\\n\\n\\n\\n\\n\\n\\n\\nSearch…\\nCtrl+K\\n\\n\\n\\n\\n\\n\\n\\nESC\\n\\n\\n\\n\\n\\n\\n\\n\\nToggle dark mode\\n\\nAPI Changelog\\n\\n\\n\\n\\n              Download source\\n\\n      \\n\\n\\n\\n\\n\\nJSON OpenAPI specification\\n\\n\\nYAML OpenAPI specification\\n\\n\\n\\n\\n\\n\\nTopics\\n\\n\\nIntroduction\\n\\n\\nAuthentication\\n\\n\\nOnboarding\\n\\n\\nEndpoints\\n\\n\\n\\n    AISP\\n \\n\\n\\n    Retrieval of the PSU accounts\\n      GET\\n\\n\\n\\n    Retrieval of an account balances report\\n      GET\\n\\n\\n\\n    Retrieval of an account overdraft\\n      GET\\n\\n\\n\\n    Retrieval of an account owners\\n      GET\\n\\n\\n\\n    Retrieval of an account transaction set\\n      GET\\n\\n\\n\\n    Retrieval of transaction details\\n      GET\\n\\n\\n\\n    Forwarding the PSU consent\\n      PUT\\n\\n\\n\\n    Retrieval of the identity of the end-user\\n      GET\\n\\n\\n\\n    Retrieval of the trusted beneficiaries list\\n      GET\\n\\n\\n\\n\\n\\n    PISP\\n \\n\\n\\n    Request a payment\\n      POST\\n\\n\\n\\n\\n\\n    CBPII\\n \\n\\n\\n    Confirm funds\\n      POST\\n\\n\\n\\n\\n\\n    Token\\n \\n\\n\\n    Get access token\\n      GET\\n\\n\\n\\n\\n\\n\\n\\n\\n\\nPowered by Bump.sh\\n \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n  \\n            Retrieval of the trusted beneficiaries list\\n\\n\\n\\n\\n\\n    GET\\n  \\n\\n    /api/v1/trusted-beneficiaries\\n  \\n\\n\\n\\n\\n        oauth\\n \\n\\n\\n\\n\\n\\n  \\n        Headers\\n\\n\\n\\n\\n\\n\\n\\n  \\n      X-Request-ID\\n\\n string\\nRequired\\n\\nCorrelation header to be set in a request and retrieved in the relevant response\\n\\n\\n\\n\\n\\n\\n\\n  \\n      Responses\\n\\n \\n\\n\\n\\n\\n\\n  \\n            200\\n\\n \\n\\n\\nHalTrustedBeneficiaries\\n\\n\\n\\n\\nHide response attributes\\nShow response attributes\\nobject\\n\\n\\n\\n\\n\\n\\n  \\n      _links\\n\\n Elixir.OpenBankingWeb.Schemas.HalLinks\\nRequired\\n\\nHAL Links\\n\\n\\n\\n\\n\\n  \\n      beneficiaries\\n\\n array[object]\\nRequired\\n\\nOne owner of user account\\n\\n\\n\\nHide beneficiaries attributes\\nShow beneficiaries attributes\\narray[object]\\n\\n\\n\\n\\n\\n\\n  \\n      first_name\\n\\n string\\n\\nFirst name\\n\\n\\n\\n\\n\\n  \\n      full_name\\n\\n string\\nRequired\\n\\nFull name\\n\\n\\n\\n\\n\\n  \\n      last_name\\n\\n string\\n\\nLast name\\n\\n\\n\\n\\n\\n  \\n      name_prefix\\n\\n string\\n\\nName Prefix\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n        GET /api/v1/trusted-beneficiaries\\n\\n    \\n  \\n\\n\\n\\n\\ncurl \\\\\\n -X GET https://iban.nash.io/api/v1/trusted-beneficiaries \\\\\\n -H \\\"Authorization: Bearer $ACCESS_TOKEN\\\" \\\\\\n -H \\\"X-Request-ID: string\\\"\\n\\n\\n\\n\\n\\n        Response examples (200)\\n\\n    \\n  \\n\\n\\n\\n\\n\\n{\\n  \\\"_links\\\": {\\n    \\\"self\\\": {\\n      \\\"href\\\": \\\"/v1/accounts\\\"\\n    }\\n  },\\n  \\\"beneficiaries\\\": [\\n    {\\n      \\\"creditor\\\": {\\n        \\\"currency\\\": \\\"EUR\\\",\\n        \\\"iban\\\": \\\"YY64COJH41059545330222956960771321\\\"\\n      },\\n      \\\"creditor_account\\\": {\\n        \\\"currency\\\": \\\"EUR\\\",\\n        \\\"iban\\\": \\\"YY64COJH41059545330222956960771321\\\"\\n      },\\n      \\\"id\\\": \\\"69581b46-bcc4-4361-b471-69205f24bc56\\\",\\n      \\\"is_trusted\\\": true\\n    }\\n  ]\\n}\\n\\n\\n\\n\\n\\n\\n        Response examples (200)\\n\\n    \\n  \\n\\n\\n\\n\\n\\n{\\n  \\\"_links\\\": {\\n    \\\"self\\\": {\\n      \\\"href\\\": \\\"/v1/accounts\\\"\\n    }\\n  },\\n  \\\"beneficiaries\\\": [\\n    {\\n      \\\"id\\\": \\\"69581b46-bcc4-4361-b471-69205f24bc56\\\",\\n      \\\"creditor\\\": {\\n        \\\"iban\\\": \\\"YY64COJH41059545330222956960771321\\\",\\n        \\\"currency\\\": \\\"EUR\\\"\\n      },\\n      \\\"is_trusted\\\": true,\\n      \\\"creditor_account\\\": {\\n        \\\"iban\\\": \\\"YY64COJH41059545330222956960771321\\\",\\n        \\\"currency\\\": \\\"EUR\\\"\\n      }\\n    }\\n  ]\\n}\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n  \\n          PISP\\n\\n\\nDismiss highlight\\n\\n\\nPayment Initiation Service Provider.\\nPayment initiation is done using the integrated OAuth2 authentication flow described in PSD2\\nspecifications.\\nThis means you first have to initiate a payment using the dedicated endpoint, then redirect the PSU to our\\nauthorisation page following the link present in the response.\\nAfter performing a strong customer authentication, the PSU will be redirected to your redirect URI with an\\nauthorisation code that you can then exchange for an access token.\\nThis access token is only needed to cancel a payment on behalf a PSU (this does not require a strong\\ncustomer authentication). It is not needed to retrieve the current status of a payment.\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"DOCUMENT\",\"hash\":\"8MGSvVVzSOUycJAFkfMDreiNF2aaepMVfncV/OuQp08=\"}","__type__":"DOCUMENT"},"3da88b8a-0ae9-4e81-92e8-5245bf5450ed":{"__data__":"{\"id_\":\"3da88b8a-0ae9-4e81-92e8-5245bf5450ed\",\"metadata\":{\"url\":\"https://docs.iban.nash.io/authentication\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{},\"text\":\"Authentication | nash iban API documentation\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n    nash iban\\n\\nShow Menu\\n\\n\\n\\n\\n\\n\\n\\nSearch…\\nCtrl+K\\n\\n\\n\\n\\n\\n\\n\\nESC\\n\\n\\n\\n\\n\\n\\n\\n\\nToggle dark mode\\n\\nAPI Changelog\\n\\n\\n\\n\\n              Download source\\n\\n      \\n\\n\\n\\n\\n\\nJSON OpenAPI specification\\n\\n\\nYAML OpenAPI specification\\n\\n\\n\\n\\n\\n\\nTopics\\n\\n\\nIntroduction\\n\\n\\nAuthentication\\n\\n\\nOnboarding\\n\\n\\nEndpoints\\n\\n\\n\\n    AISP\\n \\n\\n\\n    Retrieval of the PSU accounts\\n      GET\\n\\n\\n\\n    Retrieval of an account balances report\\n      GET\\n\\n\\n\\n    Retrieval of an account overdraft\\n      GET\\n\\n\\n\\n    Retrieval of an account owners\\n      GET\\n\\n\\n\\n    Retrieval of an account transaction set\\n      GET\\n\\n\\n\\n    Retrieval of transaction details\\n      GET\\n\\n\\n\\n    Forwarding the PSU consent\\n      PUT\\n\\n\\n\\n    Retrieval of the identity of the end-user\\n      GET\\n\\n\\n\\n    Retrieval of the trusted beneficiaries list\\n      GET\\n\\n\\n\\n\\n\\n    PISP\\n \\n\\n\\n    Request a payment\\n      POST\\n\\n\\n\\n\\n\\n    CBPII\\n \\n\\n\\n    Confirm funds\\n      POST\\n\\n\\n\\n\\n\\n    Token\\n \\n\\n\\n    Get access token\\n      GET\\n\\n\\n\\n\\n\\n\\n\\n\\n\\nPowered by Bump.sh\\n \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n  \\n        IBAN Interface\\n\\n 0.1\\n\\n\\n\\n\\n\\n        Base URL\\n\\n    \\n  \\n\\n\\n\\n\\nhttps://iban.nash.io\\n\\n\\n\\n\\nNash IBAN PSD2 API allows Third Party Providers to access account information and initiate payments on behalf of customers.\\nThe API follows PSD2 API V1.6 Guidelines. This document describe our implementation choices and where we have drifted away from the guidelines.\\nAll non-absolute paths described in this document are relatives to the base URL of the server (e.g. https://iban.nash.io for the production environment).\\n\\nThis is version 0.1 of this API documentation.\\n Last update on Jul 10, 2023.\\n\\n\\n\\n\\n\\n  \\n        Authentication\\n\\n\\nDismiss highlight\\n\\n\\n\\n\\n\\n\\n  \\n                oauth (oauth2)\\n\\n \\nAuthenticate with OAuth 2\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n  \\n        Onboarding\\n\\n \\n\\n\\nFor TPPs to be able to make a request on the API, they must follow the onboarding process.\\nFor that, it is required from them to send us an email with the following  elements :\\n\\none or more redirect URI for OAuth2 authentication\\na valid QSealC certificate\\n\\nIn exchange of what they will receive a client_id and a client_secret to be used with OAuth2 authentication.\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"DOCUMENT\",\"hash\":\"y7HtRRa7ai74p4qVcRLIBCzH3xEzbxNP1Ak5kn65RjI=\"}","__type__":"DOCUMENT"},"af4c4607-2974-41f8-bed1-24b4f48905b4":{"__data__":"{\"id_\":\"af4c4607-2974-41f8-bed1-24b4f48905b4\",\"metadata\":{\"url\":\"https://docs.iban.nash.io/group/endpoint-aisp\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{},\"text\":\"AISP | nash iban API documentation\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n    nash iban\\n\\nShow Menu\\n\\n\\n\\n\\n\\n\\n\\nSearch…\\nCtrl+K\\n\\n\\n\\n\\n\\n\\n\\nESC\\n\\n\\n\\n\\n\\n\\n\\n\\nToggle dark mode\\n\\nAPI Changelog\\n\\n\\n\\n\\n              Download source\\n\\n      \\n\\n\\n\\n\\n\\nJSON OpenAPI specification\\n\\n\\nYAML OpenAPI specification\\n\\n\\n\\n\\n\\n\\nTopics\\n\\n\\nIntroduction\\n\\n\\nAuthentication\\n\\n\\nOnboarding\\n\\n\\nEndpoints\\n\\n\\n\\n    AISP\\n \\n\\n\\n    Retrieval of the PSU accounts\\n      GET\\n\\n\\n\\n    Retrieval of an account balances report\\n      GET\\n\\n\\n\\n    Retrieval of an account overdraft\\n      GET\\n\\n\\n\\n    Retrieval of an account owners\\n      GET\\n\\n\\n\\n    Retrieval of an account transaction set\\n      GET\\n\\n\\n\\n    Retrieval of transaction details\\n      GET\\n\\n\\n\\n    Forwarding the PSU consent\\n      PUT\\n\\n\\n\\n    Retrieval of the identity of the end-user\\n      GET\\n\\n\\n\\n    Retrieval of the trusted beneficiaries list\\n      GET\\n\\n\\n\\n\\n\\n    PISP\\n \\n\\n\\n    Request a payment\\n      POST\\n\\n\\n\\n\\n\\n    CBPII\\n \\n\\n\\n    Confirm funds\\n      POST\\n\\n\\n\\n\\n\\n    Token\\n \\n\\n\\n    Get access token\\n      GET\\n\\n\\n\\n\\n\\n\\n\\n\\n\\nPowered by Bump.sh\\n \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n  \\n        Onboarding\\n\\n \\n\\n\\nFor TPPs to be able to make a request on the API, they must follow the onboarding process.\\nFor that, it is required from them to send us an email with the following  elements :\\n\\none or more redirect URI for OAuth2 authentication\\na valid QSealC certificate\\n\\nIn exchange of what they will receive a client_id and a client_secret to be used with OAuth2 authentication.\\n\\n\\n\\n\\n\\n\\n\\n\\n  \\n          AISP\\n\\n\\nDismiss highlight\\n\\n\\nAccount Information Service Provider.\\nConsent is given using the OAuth2 as a pre-step authentication flow described in PSD2 specifications.\\nThis means you don't have to manage consents using the dedicated endpoints (which are not implemented),\\nbut only to redirect the PSU to our authorisation page (using AISP as OAuth2 scope).\\nAfter performing a strong customer authentication, the PSU will be redirected to your redirect URI with an\\nauthorisation code that you can then exchange for an access token.\\nThis access token will let you authenticate at the XS2A interface to request the PSU accounts balances and\\ntransactions history.\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"DOCUMENT\",\"hash\":\"xQZonrBBexN/Gg0Sy8u3Pau8D75EE1mye0Qd13/C6pk=\"}","__type__":"DOCUMENT"},"c7107352-878c-4b7c-808e-1b293f7bb2b0":{"__data__":"{\"id_\":\"c7107352-878c-4b7c-808e-1b293f7bb2b0\",\"metadata\":{\"url\":\"https://docs-link.nash.io/\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"80f17682-6ee3-4c21-951b-e3fdb3c1f5dd\",\"metadata\":{\"url\":\"https://docs-link.nash.io/\"},\"hash\":\"Cvy5fq8v12XA21acg9ToJ5XhfVHW+BgChOA92W8ejtk=\"},\"NEXT\":{\"nodeId\":\"049b31e6-8d6d-43d5-8b2b-43ddc56c4a98\",\"metadata\":{},\"hash\":\"kA1/LMrZLPFZy13SLOItDjvTMze+WqggTgk6IUpxNwc=\"}},\"text\":\"Introduction – Nash Link API Documentation\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n        NAV\\n        \\n\\n\\n\\n\\n\\nTypeScript\\nPHP\\nPython\\nShell\\n\\n\\n\\n\\n\\n\\n\\nIntroduction\\n\\nInvoice\\nPayment sequence\\nInvoice states\\nErrors\\nActivating API Access\\nOur SDKs\\nE-commerce\\nRest API Access\\n\\n\\n\\nSDKs\\n\\nCreate a invoice\\nGet a invoice\\n\\n\\n\\nE-Commerce Plugins\\n\\nMagento 2\\nWooCommerce\\nPrestashop\\n\\n\\n\\nRest API\\n\\nAPI URLs\\nRequest headers\\nSigning requests\\nCreate an invoice\\nGet an invoice\\nInvoice webhooks\\nSetup a webhook endpoint\\nReceiving webhook data\\nTrigger webhook\\n\\n\\n\\n\\n\\n\\n\\nNash Link API Documentation #\\nIntroduction #\\nThe Nash Link Payment Gateway API is designed for merchants that need full control over their customers’ shopping and checkout experience or for single person who wants to bill in crypto, receive in fiat.\\nThere are four interactions with the Nash Link service that this API enables:\\n● create an invoice\\n● fetch an invoice\\n● receive invoice status (via webhook call from nash link backend on each invoice status change)\\n● trigger a webhook\\nInvoice #\\nThe invoice is the main data structure for payments. When a user wants to pay with Nash Link, the merchant\\ncreates an invoice for the specified amount and can optionally include further fields, such as internal order ID, redirect URL and many others.\\n{\\n  \\\"facade\\\": \\\"merchant/invoice\\\",\\n  \\\"data\\\": {\\n    \\\"id\\\": \\\"JDBtJCFV\\\",\\n    \\\"status\\\": \\\"complete\\\",\\n    \\\"price\\\": 9,\\n    \\\"currency\\\": \\\"EUR\\\",\\n    \\\"itemDesc\\\": \\\"Item XYZ\\\",\\n    \\\"orderId\\\": \\\"10118\\\",\\n    \\\"posData\\\": \\\"tx46523\\\",\\n    \\\"invoiceTime\\\": 1588318118648,\\n    \\\"expirationTime\\\": 1588319018648,\\n    \\\"currentTime\\\": 1588325917427,\\n    \\\"paidOn\\\": 1588319018644,\\n    \\\"notificationEmail\\\": \\\"youremail@domain.com\\\",\\n    \\\"notificationURL\\\": \\\"https://yourredirecturl.com\\\",\\n    \\\"redirectURL\\\": \\\"https://yourwebsite.com/checkout/10118\\\",\\n    \\\"url\\\": \\\"https://link.nash.io/widget?invoiceId=JDBtJCFV\\\",\\n    \\\"transactionCurrency\\\": \\\"BTC\\\",\\n    \\\"amountPaid\\\": 92313,\\n    \\\"displayAmountPaid\\\": \\\"0.00092313\\\",\\n    \\\"exchangeRates\\\": {\\n      \\\"BTC\\\": {\\n        \\\"EUR\\\": 9749.44\\n      }\\n    },\\n    \\\"supportedTransactionCurrencies\\\": {\\n      \\\"BTC\\\": {\\n        \\\"enabled\\\": true\\n      }\\n    },\\n    \\\"paymentWalletAddress\\\": \\\"bc1qx2qyua0kjzyhza5y4x9lj7mghu39sm4d0sl226\\\",\\n    \\\"paymentWalletBlockchain\\\": \\\"BTC\\\",\\n    \\\"paymentCodes\\\": {\\n      \\\"BTC\\\": {\\n        \\\"BIP21\\\": \\\"bitcoin:bc1qx2qyua0kjzyhza5y4x9lj7mghu39sm4d0sl226?value=0.00092313\\\"\\n      }\\n    },\\n  }\\n}\\nData fields\\n\\n\\n\\nName\\nType\\nDescription\\n\\n\\n\\n\\nid\\nstring\\nID of this specific invoice\\n\\n\\nstatus\\nstring\\nnew / paid / complete / expired\\n\\n\\nprice\\nnumber\\nFiat amount of the invoice\\n\\n\\ncurrency\\nstring\\nFiat currency of the invoice\\n\\n\\nitemDesc\\nstring\\nMerchant-provided reference text about the items in this invoice\\n\\n\\norderId\\nstring\\nMerchant-provided reference ID\\n\\n\\nposData\\nstring\\nPassthru variable for Merchant internal use\\n\\n\\ninvoiceTime\\nnumber\\nTimestamp of when the invoice was created\\n\\n\\nexpirationTime\\nnumber\\nTimestamp of when the invoice will expire\\n\\n\\ncurrentTime\\nnumber\\nTimestamp of the API call retrieving this invoice\\n\\n\\npaidOn\\nnumber\\nTimestamp of when the invoice was paid\\n\\n\\nnotificationEmail\\nstring\\nEmail address of the merchant to receive notifications about invoice status changes\\n\\n\\nnotificationURL\\nstring\\nURL of the merchant backend to receive webhooks relating to invoice status changes\\n\\n\\nredirectURL\\nstring\\nMerchant-provided URL to redirect the user after a successful payment\\n\\n\\nurl\\nstring\\nWeb address of the invoice\\n\\n\\ntransactionCurrency\\nstring\\nSymbol of cryptocurrency the user paid with\\n\\n\\namountPaid\\nnumber\\nAmount the user paid, in smallest unit of the cryptocurrency (initially 0)\\n\\n\\ndisplayAmountPaid\\nstring\\nAmount the user paid, in full unit of the cryptocurrency (initially '0')\\n\\n\\nexchangeRates\\nobject\\nExchange rates for this invoice\\n\\n\\nsupportedTransactionCurrencies\\nobject\\nSupported cryptocurrencies to pay this invoice\\n\\n\\npaymentWalletAddress\\nstring\\nWallet address for payment\\n\\n\\npaymentWalletBlockchain\\nstring\\nWallet blockchain\\n\\n\\npaymentCodes\\nobject\\nURI for sending a transaction to the invoice\\n\\n\\n\\n\\nNote: Cryptocurrency amounts are always in the smallest unit of any specific currency (for instance, in case of Bitcoin, amounts are always denominated in satoshis).\\n\\nPayment sequence #\\nClick to enlarge:\",\"textTemplate\":\"\",\"endCharIdx\":4150,\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\",\"hash\":\"07W9A4TbG27BCeLErpS6oN1noOqv8OPJlQArrSsqPyo=\"}","__type__":"TEXT"},"049b31e6-8d6d-43d5-8b2b-43ddc56c4a98":{"__data__":"{\"id_\":\"049b31e6-8d6d-43d5-8b2b-43ddc56c4a98\",\"metadata\":{\"url\":\"https://docs-link.nash.io/\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"80f17682-6ee3-4c21-951b-e3fdb3c1f5dd\",\"metadata\":{\"url\":\"https://docs-link.nash.io/\"},\"hash\":\"Cvy5fq8v12XA21acg9ToJ5XhfVHW+BgChOA92W8ejtk=\"},\"PREVIOUS\":{\"nodeId\":\"c7107352-878c-4b7c-808e-1b293f7bb2b0\",\"metadata\":{\"url\":\"https://docs-link.nash.io/\"},\"hash\":\"U2pSMhbYojmkF/DVE2dAEXqIw2K0HBTrcbTIsauqr38=\"},\"NEXT\":{\"nodeId\":\"123be561-7ccb-42f8-823f-dfba0a4ff2fa\",\"metadata\":{},\"hash\":\"L6d3ttYdieernAi97ZdBQG4vZVj46Y2qnbGW6rOqSEM=\"}},\"text\":\"redirectURL\\nstring\\nMerchant-provided URL to redirect the user after a successful payment\\n\\n\\nurl\\nstring\\nWeb address of the invoice\\n\\n\\ntransactionCurrency\\nstring\\nSymbol of cryptocurrency the user paid with\\n\\n\\namountPaid\\nnumber\\nAmount the user paid, in smallest unit of the cryptocurrency (initially 0)\\n\\n\\ndisplayAmountPaid\\nstring\\nAmount the user paid, in full unit of the cryptocurrency (initially '0')\\n\\n\\nexchangeRates\\nobject\\nExchange rates for this invoice\\n\\n\\nsupportedTransactionCurrencies\\nobject\\nSupported cryptocurrencies to pay this invoice\\n\\n\\npaymentWalletAddress\\nstring\\nWallet address for payment\\n\\n\\npaymentWalletBlockchain\\nstring\\nWallet blockchain\\n\\n\\npaymentCodes\\nobject\\nURI for sending a transaction to the invoice\\n\\n\\n\\n\\nNote: Cryptocurrency amounts are always in the smallest unit of any specific currency (for instance, in case of Bitcoin, amounts are always denominated in satoshis).\\n\\nPayment sequence #\\nClick to enlarge:\\n\\n\\n\\nInvoice states #\\nA Nash Link invoice can be in one of the following states. After each state transition a webhook is sent to the merchant callback URL, as described here.\\nnew\\nAn invoice starts in the new state. Payments made to this invoice have a 20 minute window to be confirmed on the blockchain.\\npaid\\nAfter a payment was detected on the blockchain, an invoice is marked as paid. This is a transition state and the invoice will become either expired or complete.\\ncomplete\\nIf the full payment made to an invoice has been confirmed on the blockchain during the confirmation window, the invoice is marked as complete. The merchant will be credited the invoice amount on the next payout.\\nexpired\\nAn invoice is marked as expired if the payment wasn’t made in full or confirmed on the blockchain in time. All payments received will be automatically refunded.\\nSee also:\\n\\nInvoice webhooks\\n\\nErrors #\\nThe Nash Link API uses the following error codes:\\n\\n\\n\\nError Code\\nMeaning\\n\\n\\n\\n\\n400\\nBad Request – Your request sucks\\n\\n\\n401\\nUnauthorized – Your API key is incorrect\\n\\n\\n404\\nNot Found – The specified resource could not be found\\n\\n\\n500\\nInternal Server Error – We had a problem with our server – try again later\\n\\n\\n503\\nService Unavailable – We’re temporarially offline for maintanance – try again laterActivating API Access #\\nThe merchant must obtain an API key from the Nash link web app to get access to the API calls.The API generation/revoke actions are accessible at https://link.nash.io/developers/.\\nA merchant can create multiple keys for use with different e-commerce stores or API functions.Once an API key has been created, Nash link will use this API key to authenticate your API connections.The merchant’s API key must remain private and should never be visible on any client-facing code.Should it ever be compromised, the merchant can generate a new key in their Nash Link account.Our SDKs #\\nWe provide well-maintained SDKs for several programming languages.These are a slim layer to simplify API access (in particular, request signing):\\n\\nNode.js / TypeScript\\nPHP\\nPython\\n\\nRead more\\nE-commerce #\\nWe also provide well-maintained plugins for some well-know ecommerce frameworks.The easiest way to start using Nash link if you have any of those ecommerce platforms.Magento 2\\nPrestashop\\nWoocommerce\\n\\nRead more\\nRest API Access #\\nNash link provides a standards-based REST interface which enables application developers to interact in a powerful, yet secure way with their Nash link account.Read more\\nSDKs #\\nTo start using a SDK, simply download and follow instructions:\\n\\nNode.js / TypeScript\\nPHP\\nPython\\n\\nCreate a invoice #\\nCreating a invoice in a few lines of code.Creating an invoice with our SDK:\\n\\nimport { NashLinkApi } from '@neon-exchange/nash-link'\\n\\nconst api = new NashLinkApi('sandbox', `<YOUR_API_KEY>`, `<YOUR_API_SECRET_KEY>`)\\n\\n// create the invoice\\nconst invoiceResponse = await api.createInvoice({\\n  price: 10\\n  currency: 'EUR'\\n})\\n<?php\\nrequire_once 'NashLinkApi.php';\\n\\nuse Nash\\\\Link\\\\NashLinkApi;\\n\\n$api = new NashLinkApi('sandbox', '<YOUR_API_KEY>', '<YOUR_API_SECRET_KEY>');\\n$invoice_data = array(\\\"price\\\" => 10, \\\"currency\\\" => \\\"EUR\\\");\\n\\n// create the invoice\\n$response = $api->createInvoice($invoice_data);\\n\\n// check for errors\\nif ($response['error'] == true) {\\n  print $response['message'];\\n  print $response['status_code'];\\n  return;\\n}\\n\\n// created invoice data\\nvar_dump($response['data'])\\nfrom nashlink import nashlink\\n\\n# instantiate api\\n# use 'sandbox' for integration tests\\n# use 'prod' for final production environment\\nnashlink_api = nashlink.\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\",\"hash\":\"j3mBmlGssDAmvPNeqcDxiPQCwAcPEWAWTXvV2nJL3dc=\"}","__type__":"TEXT"},"123be561-7ccb-42f8-823f-dfba0a4ff2fa":{"__data__":"{\"id_\":\"123be561-7ccb-42f8-823f-dfba0a4ff2fa\",\"metadata\":{\"url\":\"https://docs-link.nash.io/\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"80f17682-6ee3-4c21-951b-e3fdb3c1f5dd\",\"metadata\":{\"url\":\"https://docs-link.nash.io/\"},\"hash\":\"Cvy5fq8v12XA21acg9ToJ5XhfVHW+BgChOA92W8ejtk=\"},\"PREVIOUS\":{\"nodeId\":\"049b31e6-8d6d-43d5-8b2b-43ddc56c4a98\",\"metadata\":{\"url\":\"https://docs-link.nash.io/\"},\"hash\":\"kA1/LMrZLPFZy13SLOItDjvTMze+WqggTgk6IUpxNwc=\"},\"NEXT\":{\"nodeId\":\"cae8dab0-895b-4c55-a0f6-5ba43cbc7066\",\"metadata\":{},\"hash\":\"OQrUGwqkPlM9yySI1KYtpDV9G/3cK1P/fhcd5wIkG8k=\"}},\"text\":\"createInvoice({\\n  price: 10\\n  currency: 'EUR'\\n})\\n<?php\\nrequire_once 'NashLinkApi.php';\\n\\nuse Nash\\\\Link\\\\NashLinkApi;\\n\\n$api = new NashLinkApi('sandbox', '<YOUR_API_KEY>', '<YOUR_API_SECRET_KEY>');\\n$invoice_data = array(\\\"price\\\" => 10, \\\"currency\\\" => \\\"EUR\\\");\\n\\n// create the invoice\\n$response = $api->createInvoice($invoice_data);\\n\\n// check for errors\\nif ($response['error'] == true) {\\n  print $response['message'];\\n  print $response['status_code'];\\n  return;\\n}\\n\\n// created invoice data\\nvar_dump($response['data'])\\nfrom nashlink import nashlink\\n\\n# instantiate api\\n# use 'sandbox' for integration tests\\n# use 'prod' for final production environment\\nnashlink_api = nashlink.Api('sandbox', '<YOUR_API_KEY>', '<YOUR_API_SECRET_KEY>')\\n# setup order data for the invoice\\ninvoice = {'price': 10, 'currency': 'EUR'}\\n# create the invoice\\nresponse = nashlink_api.create_invoice(invoice)\\n\\n# check for errors\\nif response['error']:\\n    print(response['message'])\\n    print(response['status_code'])\\n    exit()\\n\\n# created invoice data\\nprint(str(response['data']))\\n# there is no shell sdk, use it for REST API access.Returns Invoice object or Error status/message\\n\\nGet a invoice #\\nGetting a invoice in a few lines of code.Getting an invoice data with our SDK:\\n\\nimport { NashLinkApi } from '@neon-exchange/nash-link'\\n\\nconst api = new NashLinkApi('sandbox', `<YOUR_API_KEY>`, `<YOUR_API_SECRET_KEY>`)\\nconst invoiceResponse = await api.getInvoice('<INVOICE_ID>')\\n<?php\\nrequire_once 'NashLinkApi.php';\\n\\nuse Nash\\\\Link\\\\NashLinkApi;\\n\\n$api = new NashLinkApi('sandbox', '<YOUR_API_KEY>', '<YOUR_API_SECRET_KEY>');\\n\\n// get the invoice\\n$response = $api->getInvoice('<INVOICE_ID>');\\n\\n// check for errors\\nif ($response['error'] == true) {\\n  print $response['message'];\\n  print $response['status_code'];\\n  return;\\n}\\n\\n// invoice data\\nvar_dump($response['data'])\\nfrom nashlink import nashlink\\n\\n# instantiate api\\n# use 'sandbox' for integration tests\\n# use 'prod' for final production environment\\nnashlink_api = nashlink.Api('sandbox', '<YOUR_API_KEY>', '<YOUR_API_SECRET_KEY>')\\n# get a invoice\\nresponse = nashlink_api.get_invoice('<INVOICE_ID>')\\n\\n# check for errors\\nif response['error']:\\n    print(response['message'])\\n    print(response['status_code'])\\n    exit()\\n\\n# invoice data\\nprint(str(response['data']))\\n# there is no shell sdk, use it for REST API access.Returns Invoice object or Error status/message\\n\\nE-Commerce Plugins #\\nThis section describes the installation of our payment plugin in various e-commerce solutions.Magento 2 #\\nDownload Nashlink plugins and sdks zip pack.Extract the downloaded zip pack\\nThe plugin is at unziped folder plugin-magento2-checkout/Nashlink/\\n\\nYou need access to your magento instance for ssh and/or ftp.As first step you need to copy Nashlink/ plugin directory to magento code path.Most common ways are via FTP or SSH.After that, connect via ssh or machine console to run magento install commands.Copy Magento 2 plugin over FTP\\nAccess your magento instance via ftp and copy Nashlink/ plugin directory to <MAGENTO_BASE_PATH>/app/code/\\nCopy Magento 2 plugin over SSH\\n$ scp -r Nashlink <your_user>@<your_magento_ip>:<MAGENTO_BASE_PATH>/app/code/\\nInstall Magento 2 plugin\\nGet terminal access to your magento instance via ssh:\\n$ ssh <your_user>@<your_magento_ip>\\nAfter login, run the following commands inside magento instance:\\n$ bin/magento setup:upgrade\\n$ bin/magento module:enable Nashlink_NPCheckout\\n$ bin/magento setup:static-content:deploy -f\\n$ bin/magento cache:flush\\nActive Magento 2 plugin\\nYou can now activate Nashlink checkout plugin inside admin interface via Stores -> Configuration -> Sales-> Payment Methods\\nFollow the instructions on plugin configuration interface to get your store ready for Nashlink.WooCommerce #\\nDownload Nashlink plugins and sdks zip pack.Extract the downloaded zip pack\\nThe plugin is at unziped folder plugin-woocommerce-checkout/nashlink/\\n\\nYou need access to your woocommerce wordpress instance for ssh and/or ftp.Manual Install\\nIt requires you first installs and configure WooCommerce plugin on your wordpress instance.After get WooCommerce up and running you are able to install nashlink checkout.\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\",\"hash\":\"SGgVfuswFuvBqJpcnXZJCx06GFMAFtw8HJcicNpMbAQ=\"}","__type__":"TEXT"},"cae8dab0-895b-4c55-a0f6-5ba43cbc7066":{"__data__":"{\"id_\":\"cae8dab0-895b-4c55-a0f6-5ba43cbc7066\",\"metadata\":{\"url\":\"https://docs-link.nash.io/\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"80f17682-6ee3-4c21-951b-e3fdb3c1f5dd\",\"metadata\":{\"url\":\"https://docs-link.nash.io/\"},\"hash\":\"Cvy5fq8v12XA21acg9ToJ5XhfVHW+BgChOA92W8ejtk=\"},\"PREVIOUS\":{\"nodeId\":\"123be561-7ccb-42f8-823f-dfba0a4ff2fa\",\"metadata\":{\"url\":\"https://docs-link.nash.io/\"},\"hash\":\"L6d3ttYdieernAi97ZdBQG4vZVj46Y2qnbGW6rOqSEM=\"},\"NEXT\":{\"nodeId\":\"ee3079de-438a-43fd-9b37-ecbf84a8b93e\",\"metadata\":{},\"hash\":\"lNMvxN89UGbmZYd5Ym6F/HX6+HvTqWSnaJMdfSaWGnA=\"}},\"text\":\"WooCommerce #\\nDownload Nashlink plugins and sdks zip pack.Extract the downloaded zip pack\\nThe plugin is at unziped folder plugin-woocommerce-checkout/nashlink/\\n\\nYou need access to your woocommerce wordpress instance for ssh and/or ftp.Manual Install\\nIt requires you first installs and configure WooCommerce plugin on your wordpress instance.After get WooCommerce up and running you are able to install nashlink checkout.Download the latest nashlink woocomerce checkout distribution here nashlink woocommerce checkout\\nLog in on you woocommerce instance as admin.Go to Plugins -> Add New -> Browse -> woocommerce-nashlink.zip\\nAfter that, you can enable the plugin on admin interface(wordpress plugin and woocomerce payment choice).You can use the same process to update to newer versions.Prestashop #\\nDownload the latest nashlink prestashop checkout distribution here nashlink prestashop checkout\\nLog in on you prestashop instance as admin.Go to Modules -> Module Manager -> Upload a module -> Select file -> prestashop-nashlink.zip\\nClick Install\\nConfigure\\nJust after finishing installing Nash Link module, you can click “configure” for the setup.Rest API #\\nNash link provides a standards-based REST interface which enables application developers to interact in a powerful, yet secure way with their Nash link account.Developers may call the API directly over HTTPS using the language of their choice, or take advantage of one of Nash link code libraries (Javascript, Python and PHP).For a shell environment we higly recommends curl, openssl and sed to sign requests.API URLs #\\nThe Nash Link API base URLs are:\\n\\nhttps://link.nash.io/api/v1/sandbox for sandbox\\nhttps://link.nash.io/api/v1/prod for production\\n\\nNote: You need to use an API key created for the specific environment.Request headers #\\nAll authenticated requests need to include the following HTTP headers:\\n\\nx-identity: your API key\\nx-signature: the signature, as described here\\n\\nWe suggest you to use openssl for signatures since its opensource and widely avaliable over different operational systems.Signing requests #\\n\\nSign you payload:\\n\\nimport * as crypto from 'crypto'\\n\\nconst apiSecretKey = '<YOUR_API_SECRET_KEY>'\\nconst environment = 'https://link.nash.io/api/v1/sandbox/invoices'\\n\\nconst invoice = {\\\"price\\\": 10, \\\"currency\\\": \\\"EUR\\\"}\\nconst payload = environment+JSON.stringify(invoice)\\nconst signature = crypto.createHmac(\\\"sha256\\\", apiSecretKey).update(payload).digest(\\\"hex\\\")\\n<?php\\nconst API_SECRET_KEY = '<YOUR_API_SECRET_KEY>';\\nconst ENVIRONMENT = 'https://link.nash.io/api/v1/sandbox/invoices';\\n\\n$invoice_data = array(\\\"price\\\" => 10, \\\"currency\\\" => \\\"EUR\\\");\\n$payload = ENVIRONMENT .json_encode($invoice_data)\\n$signature = hash_hmac('sha256', $payload, API_SECRET_KEY);\\nimport hmac\\nimport hashlib\\n\\nAPI_SECRET_KEY = '<YOUR_API_SECRET_KEY>';\\nENVIRONMENT = 'https://link.nash.io/api/v1/sandbox/invoices';\\n\\ninvoice = {'price': 10, 'currency': 'EUR'}\\npayload = ''.join([ENVIRONMENT,str(json.dumps(invoice))])\\nsignature = hmac.new(API_SECRET_KEY.encode('utf-8'), \\n                     msg=payload.encode('utf-8'),\\n                     digestmod=hashlib.sha256).hexdigest().upper()\\n#!/bin/sh\\nAPI_SECRET_KEY='<YOUR_API_SECRET_KEY>'\\nENVIRONMENT='https://link.nash.io/api/v1/sandbox/invoices'\\n\\nINVOICE='{\\\"price\\\": 10, \\\"currency\\\": \\\"EUR\\\"}'\\n# make use of openssl + sed\\nSIGNATURE=`echo -n \\\"${ENVIRONMENT}${INVOICE}\\\" | openssl dgst -sha256 -hmac \\\"${API_SECRET_KEY}\\\" | sed 's/(stdin)= //g'`\\nAuthenticated requests need to be signed with the API secret key.You need to concatenate the URL with the request body, create a HMAC-SHA256 signature, then send this as the x-signature header.If you use our SDKs you don’t need to sign requests manually.For example, say you wish to send a request to https://link.nash.io/api/v1/sandbox/invoices with this payload:\\n{ \\\"price\\\": 10, \\\"currency\\\": \\\"EUR\\\" }\\nYou’d concatenate the URL and request body like this:\\nhttps://link.nash.io/api/v1/sandbox/invoices{\\\"price\\\": 10, \\\"currency\\\": \\\"EUR\\\"}\\nThis string is then signed using HMAC-SHA256 and the API secret key.The resulting signature needs to be sent in the x-signature HTTP header.\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\",\"hash\":\"Q7L9RCbSPG39/7CIYsc6apj1yn/8FtSfgWApTZZRPBE=\"}","__type__":"TEXT"},"ee3079de-438a-43fd-9b37-ecbf84a8b93e":{"__data__":"{\"id_\":\"ee3079de-438a-43fd-9b37-ecbf84a8b93e\",\"metadata\":{\"url\":\"https://docs-link.nash.io/\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"80f17682-6ee3-4c21-951b-e3fdb3c1f5dd\",\"metadata\":{\"url\":\"https://docs-link.nash.io/\"},\"hash\":\"Cvy5fq8v12XA21acg9ToJ5XhfVHW+BgChOA92W8ejtk=\"},\"PREVIOUS\":{\"nodeId\":\"cae8dab0-895b-4c55-a0f6-5ba43cbc7066\",\"metadata\":{\"url\":\"https://docs-link.nash.io/\"},\"hash\":\"OQrUGwqkPlM9yySI1KYtpDV9G/3cK1P/fhcd5wIkG8k=\"},\"NEXT\":{\"nodeId\":\"148c7c52-99fb-4f8d-9d0b-30bdfe24ad31\",\"metadata\":{},\"hash\":\"UAZtfvdH7NGq2gk/YvYuKP8XPANtpXtEeL3Xt2kwgsk=\"}},\"text\":\"You need to concatenate the URL with the request body, create a HMAC-SHA256 signature, then send this as the x-signature header.If you use our SDKs you don’t need to sign requests manually.For example, say you wish to send a request to https://link.nash.io/api/v1/sandbox/invoices with this payload:\\n{ \\\"price\\\": 10, \\\"currency\\\": \\\"EUR\\\" }\\nYou’d concatenate the URL and request body like this:\\nhttps://link.nash.io/api/v1/sandbox/invoices{\\\"price\\\": 10, \\\"currency\\\": \\\"EUR\\\"}\\nThis string is then signed using HMAC-SHA256 and the API secret key.The resulting signature needs to be sent in the x-signature HTTP header.Create an invoice #\\n\\nCreate a Invoice with Rest call:\\n\\nimport * as crypto from 'crypto'\\n\\nconst apiKey = '<YOUR_API_KEY>'\\nconst apiSecretKey = '<YOUR_API_SECRET_KEY>'\\nconst environment = 'https://link.nash.io/api/v1/sandbox/invoices'\\n\\nconst invoice = {\\\"price\\\": 10, \\\"currency\\\": \\\"EUR\\\"}\\nconst payload = environment+JSON.stringify(invoice)\\nconst signature = crypto.createHmac(\\\"sha256\\\", apiSecretKey).update(payload).digest(\\\"hex\\\")\\n\\nconst headers = {\\n  'Accept': 'application/json';\\n  'Content-Type': 'application/json',\\n  'x-identity': apiKey,\\n  'x-signature': signature\\n}\\n\\nconst fetchPromise = fetch(environment, {\\n  method: 'post',\\n  body: JSON.stringify(data),\\n  headers\\n})\\n<?php\\nconst API_KEY = '<YOUR_API_KEY>';\\nconst API_SECRET_KEY = '<YOUR_API_SECRET_KEY>';\\nconst ENVIRONMENT = 'https://link.nash.io/api/v1/sandbox/invoices';\\n\\n$invoice_data = array(\\\"price\\\" => 10, \\\"currency\\\" => \\\"EUR\\\");\\n$payload = ENVIRONMENT .json_encode($invoice_data)\\n$signature = hash_hmac('sha256', $payload, API_SECRET_KEY);\\n\\n$request_headers = array();\\n$request_headers[] = 'Accept: application/json';\\n$request_headers[] = 'Content-Type: application/json';\\n$request_headers[] = 'x-identity: ' .API_KEY;\\n$request_headers[] = 'x-signature: ' .$signature;\\n\\n$ch = curl_init();\\ncurl_setopt($ch, CURLOPT_URL, ENVIRONMENT);\\ncurl_setopt($ch, CURLOPT_POST, 1);\\ncurl_setopt($ch, CURLOPT_POSTFIELDS, json_encode($invoice_data));\\ncurl_setopt($ch, CURLOPT_HTTPHEADER, $request_headers);\\ncurl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\\n$result = curl_exec($ch);\\n$status_code = curl_getinfo($ch, CURLINFO_HTTP_CODE);\\ncurl_close($ch);\\n        \\nimport hmac\\nimport hashlib\\n\\nAPI_KEY = '<YOUR_API_KEY>';\\nAPI_SECRET_KEY = '<YOUR_API_SECRET_KEY>';\\nENVIRONMENT = 'https://link.nash.io/api/v1/sandbox/invoices';\\n\\ninvoice = {'price': 10, 'currency': 'EUR'}\\npayload = ''.join([ENVIRONMENT,str(json.dumps(invoice))])\\nsignature = hmac.new(API_SECRET_KEY.encode('utf-8'), \\n                     msg=payload.encode('utf-8'),\\n                     digestmod=hashlib.sha256).hexdigest().upper()\\n\\nrequest_headers = {'Accept': 'application/json',\\n                   'Content-Type': 'application/json',\\n                   'x-identity': API_KEY,\\n                   'x-signature': signature}\\n\\nr = requests.post(url=ENVIRONMENT, headers=request_headers, json=invoice)\\n#!/bin/sh\\nAPI_KEY='<YOUR_API_KEY>'\\nAPI_SECRET_KEY='<YOUR_API_SECRET_KEY>'\\nENVIRONMENT='https://link.nash.io/api/v1/sandbox/invoices'\\n\\nINVOICE='{\\\"price\\\": 10, \\\"currency\\\": \\\"EUR\\\"}'\\n# make use of openssl + sed\\nSIGNATURE=`echo -n \\\"${ENVIRONMENT}${INVOICE}\\\" | openssl dgst -sha256 -hmac \\\"${API_SECRET_KEY}\\\" | sed 's/(stdin)= //g'`\\n\\ncurl \\\\\\n-H 'Accept: application/json' \\\\\\n-H 'Content-Type: application/json' \\\\\\n-H \\\"x-identity: ${API_KEY}\\\" \\\\\\n-H \\\"x-signature: ${SIGNATURE}\\\" \\\\\\n-X POST \\\\\\n-d \\\"$INVOICE\\\" \\\\\\n$ENVIRONMENT\\nPOST /invoices\\n\\nReturns Invoice object or Error status/message\\n\\nRequest headers\\n\\ncontent-type: application/json\\nx-identity: your API key\\nx-signature: the signature, as described here\\n\\nRequest body (JSON)\\nMandatory fields\\n\\n\\n\\nName\\nType\\nDescription\\n\\n\\n\\n\\nprice\\nnumber\\nAmount in fiat\\n\\n\\ncurrency\\nstring\\nFiat currency, in ISO 4217 3-character currency code. Must be EUR currently.\\n\\n\\n\\n\\nOptional fields\\n\\n\\n\\nName\\nType\\nDescription\\n\\n\\n\\n\\norderId\\nstring\\nMerchant order reference ID\\n\\n\\nitemDesc\\nstring\\nDescription of the purchase\\n\\n\\nposData\\nstring\\nPassthru variable for Merchant internal use\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\",\"hash\":\"iZu+ZiYErqESGMf0ThZP2xd1kECiV+5JWl23L3zFuNg=\"}","__type__":"TEXT"},"148c7c52-99fb-4f8d-9d0b-30bdfe24ad31":{"__data__":"{\"id_\":\"148c7c52-99fb-4f8d-9d0b-30bdfe24ad31\",\"metadata\":{\"url\":\"https://docs-link.nash.io/\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"80f17682-6ee3-4c21-951b-e3fdb3c1f5dd\",\"metadata\":{\"url\":\"https://docs-link.nash.io/\"},\"hash\":\"Cvy5fq8v12XA21acg9ToJ5XhfVHW+BgChOA92W8ejtk=\"},\"PREVIOUS\":{\"nodeId\":\"ee3079de-438a-43fd-9b37-ecbf84a8b93e\",\"metadata\":{\"url\":\"https://docs-link.nash.io/\"},\"hash\":\"lNMvxN89UGbmZYd5Ym6F/HX6+HvTqWSnaJMdfSaWGnA=\"},\"NEXT\":{\"nodeId\":\"bd303941-edd9-4a89-96dd-e8d71df93659\",\"metadata\":{},\"hash\":\"8trq3tPqpJUwoZdAmWj8T9E5/1zhIGl2tNJUr1dSOvE=\"}},\"text\":\"Name\\nType\\nDescription\\n\\n\\n\\n\\nprice\\nnumber\\nAmount in fiat\\n\\n\\ncurrency\\nstring\\nFiat currency, in ISO 4217 3-character currency code. Must be EUR currently.\\n\\n\\n\\n\\nOptional fields\\n\\n\\n\\nName\\nType\\nDescription\\n\\n\\n\\n\\norderId\\nstring\\nMerchant order reference ID\\n\\n\\nitemDesc\\nstring\\nDescription of the purchase\\n\\n\\nposData\\nstring\\nPassthru variable for Merchant internal use\\n\\n\\nnotificationEmail\\nstring\\nEmail address of the merchant to receive notifications about invoice status changes\\n\\n\\nnotificationURL\\nstring\\nURL of the merchant backend to enable and receive webhooks relating to invoice status changes\\n\\n\\nredirectURL\\nstring\\nURL to redirect the user to after a successful purchaseResponse\\nAn Invoice object as described in the Invoice object documentation.Get an invoice #\\nGET /invoices/<invoiceId>\\nimport * as crypto from 'crypto'\\n\\nconst apiKey = '<YOUR_API_KEY>'\\nconst apiSecretKey = '<YOUR_API_SECRET_KEY>'\\nconst environment = 'https://link.nash.io/api/v1/sandbox/invoices/'\\n\\nconst invoiceId = '<INVOICE_ID>'\\nconst payload = environment+invoiceId\\nconst signature = crypto.createHmac(\\\"sha256\\\", apiSecretKey).update(payload).digest(\\\"hex\\\")\\n\\nconst headers = {\\n  'Accept': 'application/json';\\n  'Content-Type': 'application/json',\\n  'x-identity': apiKey,\\n  'x-signature': signature\\n}\\n\\nconst fetchPromise = fetch(environment+invoiceId, { headers })\\n<?php\\nconst API_KEY = '<YOUR_API_KEY>';\\nconst API_SECRET_KEY = '<YOUR_API_SECRET_KEY>';\\nconst ENVIRONMENT = 'https://link.nash.io/api/v1/sandbox/invoices/';\\n\\n$invoice_id = '<INVOICE_ID>';\\n$payload = ENVIRONMENT .invoice_id\\n$signature = hash_hmac('sha256', $payload, API_SECRET_KEY);\\n\\n$request_headers = array();\\n$request_headers[] = 'Accept: application/json';\\n$request_headers[] = 'Content-Type: application/json';\\n$request_headers[] = 'x-identity: ' .API_KEY;\\n$request_headers[] = 'x-signature: ' .$signature;\\n\\n$ch = curl_init();\\ncurl_setopt($ch, CURLOPT_URL, ENVIRONMENT .invoice_id);\\ncurl_setopt($ch, CURLOPT_HTTPHEADER, $request_headers);\\ncurl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\\n$result = curl_exec($ch);\\n$status_code = curl_getinfo($ch, CURLINFO_HTTP_CODE);\\ncurl_close($ch);\\n        \\nimport hmac\\nimport hashlib\\n\\nAPI_KEY = '<YOUR_API_KEY>';\\nAPI_SECRET_KEY = '<YOUR_API_SECRET_KEY>';\\nENVIRONMENT = 'https://link.nash.io/api/v1/sandbox/invoices/';\\n\\ninvoice_id = '<INVOICE_ID>'\\npayload = ''.join([ENVIRONMENT,invoice_id])\\nsignature = hmac.new(API_SECRET_KEY.encode('utf-8'), \\n                     msg=payload.encode('utf-8'),\\n                     digestmod=hashlib.sha256).hexdigest().upper()\\n\\nrequest_headers = {'Accept': 'application/json',\\n                   'Content-Type': 'application/json',\\n                   'x-identity': API_KEY,\\n                   'x-signature': signature}\\n\\nr = requests.get(url=''.join([ENVIRONMENT,invoice_id]), headers=request_headers)\\n#!/bin/sh\\nAPI_KEY='<YOUR_API_KEY>'\\nAPI_SECRET_KEY='<YOUR_API_SECRET_KEY>'\\nENVIRONMENT='https://link.nash.io/api/v1/sandbox/invoices/'\\n\\nINVOICE_ID='<INVOICE_ID>'\\n# make use of openssl + sed\\nSIGNATURE=`echo -n \\\"${ENVIRONMENT}${INVOICE_ID}\\\" | openssl dgst -sha256 -hmac \\\"${API_SECRET_KEY}\\\" | sed 's/(stdin)= //g'`\\n\\ncurl \\\\\\n-H 'Accept: application/json' \\\\\\n-H 'Content-Type: application/json' \\\\\\n-H \\\"x-identity: ${API_KEY}\\\" \\\\\\n-H \\\"x-signature: ${SIGNATURE}\\\" \\\\\\n${ENVIRONMENT}${INVOICE_ID}\\n\\nReturns Invoice object or Error status/message\\n\\nRequest headers\\n\\ncontent-type: application/json\\nx-identity: your API key\\nx-signature: the signature, as described here\\n\\nResponse\\nInvoice object as described in the Invoice object documentation\\nRequest headers\\n\\ncontent-type: application/json\\nx-identity: your API key\\nx-signature: the signature, as described here\\n\\nResponse\\nThe following JSON payload: { \\\"sent\\\": true }\\nInvoice webhooks #\\nAfter each invoice state transition, a POST request is sent to the notificationURL field provided when creating the invoice.No webhook is sent when the invoice is created.If a request fails, we retry the webhook up to 20 times, waiting 5min * attempt between retries.You can also manually trigger the latest webhook call for an invoice by calling the Trigger webhook endpoint.Note: To prevent eavesdropping, we recommend securing your callback URL by using SSL and providing a secret parameter appended to the callback URL.\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\",\"hash\":\"zsm8YNbmPz9f/Y711IPfIlgkMNfEIfOqD2rOzM5ZlQU=\"}","__type__":"TEXT"},"bd303941-edd9-4a89-96dd-e8d71df93659":{"__data__":"{\"id_\":\"bd303941-edd9-4a89-96dd-e8d71df93659\",\"metadata\":{\"url\":\"https://docs-link.nash.io/\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"80f17682-6ee3-4c21-951b-e3fdb3c1f5dd\",\"metadata\":{\"url\":\"https://docs-link.nash.io/\"},\"hash\":\"Cvy5fq8v12XA21acg9ToJ5XhfVHW+BgChOA92W8ejtk=\"},\"PREVIOUS\":{\"nodeId\":\"148c7c52-99fb-4f8d-9d0b-30bdfe24ad31\",\"metadata\":{\"url\":\"https://docs-link.nash.io/\"},\"hash\":\"UAZtfvdH7NGq2gk/YvYuKP8XPANtpXtEeL3Xt2kwgsk=\"}},\"text\":\"No webhook is sent when the invoice is created.If a request fails, we retry the webhook up to 20 times, waiting 5min * attempt between retries.You can also manually trigger the latest webhook call for an invoice by calling the Trigger webhook endpoint.Note: To prevent eavesdropping, we recommend securing your callback URL by using SSL and providing a secret parameter appended to the callback URL.We send the payload to the unaltered URL, which allows you to check on your server that the parameter was not modified.Setup a webhook endpoint #\\nAt the creation of invoice, you can setup a webhook url so Nash link servers can callback your merchant server and inform about any invoice status update.To make use of this feature just set notificationURL param with you webhook endpoint.Receiving webhook data #\\nWhen Nash link servers call you merchant webhook endpoint you will receive a Invoice object data\\nTrigger webhook #\\nGET /invoices/<invoiceId>/trigger_webhook\\nGET /invoices/JDBtJCFV/trigger_webhook\\n\\nResponse:\\n\\n{ \\\"sent\\\": true }\\nRequest headers\\n\\ncontent-type: application/json\\n\\nRequest body (JSON)\\nInvoice object as described in the Invoice object documentation\\nSee also:\\n\\nInvoice states\\n\\n\\n\\n\\nTypeScript\\nPHP\\nPython\\nShell\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\",\"hash\":\"GFIagPNqMf+WKdm1AZpM2KP4RGJKsXiATvZIBc+UQEU=\"}","__type__":"TEXT"},"28c7aaec-d1c5-4df2-90cd-92d4d61e7e38":{"__data__":"{\"id_\":\"28c7aaec-d1c5-4df2-90cd-92d4d61e7e38\",\"metadata\":{\"url\":\"https://docs.iban.nash.io/\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"1d3783fb-d720-48a8-8bd9-546203337d83\",\"metadata\":{\"url\":\"https://docs.iban.nash.io/\"},\"hash\":\"2sOsC1aKEydpK2HX+OVkoKrB/6Lvg1/8VnWFc0Wj7QI=\"}},\"text\":\"nash iban API documentation\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n    nash iban\\n\\nShow Menu\\n\\n\\n\\n\\n\\n\\n\\nSearch…\\nCtrl+K\\n\\n\\n\\n\\n\\n\\n\\nESC\\n\\n\\n\\n\\n\\n\\n\\n\\nToggle dark mode\\n\\nAPI Changelog\\n\\n\\n\\n\\n              Download source\\n\\n      \\n\\n\\n\\n\\n\\nJSON OpenAPI specification\\n\\n\\nYAML OpenAPI specification\\n\\n\\n\\n\\n\\n\\nTopics\\n\\n\\nIntroduction\\n\\n\\nAuthentication\\n\\n\\nOnboarding\\n\\n\\nEndpoints\\n\\n\\n\\n    AISP\\n \\n\\n\\n    Retrieval of the PSU accounts\\n      GET\\n\\n\\n\\n    Retrieval of an account balances report\\n      GET\\n\\n\\n\\n    Retrieval of an account overdraft\\n      GET\\n\\n\\n\\n    Retrieval of an account owners\\n      GET\\n\\n\\n\\n    Retrieval of an account transaction set\\n      GET\\n\\n\\n\\n    Retrieval of transaction details\\n      GET\\n\\n\\n\\n    Forwarding the PSU consent\\n      PUT\\n\\n\\n\\n    Retrieval of the identity of the end-user\\n      GET\\n\\n\\n\\n    Retrieval of the trusted beneficiaries list\\n      GET\\n\\n\\n\\n\\n\\n    PISP\\n \\n\\n\\n    Request a payment\\n      POST\\n\\n\\n\\n\\n\\n    CBPII\\n \\n\\n\\n    Confirm funds\\n      POST\\n\\n\\n\\n\\n\\n    Token\\n \\n\\n\\n    Get access token\\n      GET\\n\\n\\n\\n\\n\\n\\n\\n\\n\\nPowered by Bump.sh\\n \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n  \\n        IBAN Interface\\n\\n 0.1\\n\\n\\n\\n\\n\\n        Base URL\\n\\n    \\n  \\n\\n\\n\\n\\nhttps://iban.nash.io\\n\\n\\n\\n\\nNash IBAN PSD2 API allows Third Party Providers to access account information and initiate payments on behalf of customers.\\nThe API follows PSD2 API V1.6 Guidelines. This document describe our implementation choices and where we have drifted away from the guidelines.\\nAll non-absolute paths described in this document are relatives to the base URL of the server (e.g. https://iban.nash.io for the production environment).\\n\\nThis is version 0.1 of this API documentation.\\n Last update on Jul 10, 2023.\",\"textTemplate\":\"\",\"endCharIdx\":1609,\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\",\"hash\":\"XAhth/xxwznf07qOFs9oT93bzPapiBOvQWd9ebtdoYI=\"}","__type__":"TEXT"},"7e350a4d-a17f-4262-8f85-302de4ae2d65":{"__data__":"{\"id_\":\"7e350a4d-a17f-4262-8f85-302de4ae2d65\",\"metadata\":{\"url\":\"https://docs.iban.nash.io/group/endpoint-pisp\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"a769b651-2a48-46e4-a67b-229eb9964a96\",\"metadata\":{\"url\":\"https://docs.iban.nash.io/group/endpoint-pisp\"},\"hash\":\"8MGSvVVzSOUycJAFkfMDreiNF2aaepMVfncV/OuQp08=\"}},\"text\":\"PISP | nash iban API documentation\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n    nash iban\\n\\nShow Menu\\n\\n\\n\\n\\n\\n\\n\\nSearch…\\nCtrl+K\\n\\n\\n\\n\\n\\n\\n\\nESC\\n\\n\\n\\n\\n\\n\\n\\n\\nToggle dark mode\\n\\nAPI Changelog\\n\\n\\n\\n\\n              Download source\\n\\n      \\n\\n\\n\\n\\n\\nJSON OpenAPI specification\\n\\n\\nYAML OpenAPI specification\\n\\n\\n\\n\\n\\n\\nTopics\\n\\n\\nIntroduction\\n\\n\\nAuthentication\\n\\n\\nOnboarding\\n\\n\\nEndpoints\\n\\n\\n\\n    AISP\\n \\n\\n\\n    Retrieval of the PSU accounts\\n      GET\\n\\n\\n\\n    Retrieval of an account balances report\\n      GET\\n\\n\\n\\n    Retrieval of an account overdraft\\n      GET\\n\\n\\n\\n    Retrieval of an account owners\\n      GET\\n\\n\\n\\n    Retrieval of an account transaction set\\n      GET\\n\\n\\n\\n    Retrieval of transaction details\\n      GET\\n\\n\\n\\n    Forwarding the PSU consent\\n      PUT\\n\\n\\n\\n    Retrieval of the identity of the end-user\\n      GET\\n\\n\\n\\n    Retrieval of the trusted beneficiaries list\\n      GET\\n\\n\\n\\n\\n\\n    PISP\\n \\n\\n\\n    Request a payment\\n      POST\\n\\n\\n\\n\\n\\n    CBPII\\n \\n\\n\\n    Confirm funds\\n      POST\\n\\n\\n\\n\\n\\n    Token\\n \\n\\n\\n    Get access token\\n      GET\\n\\n\\n\\n\\n\\n\\n\\n\\n\\nPowered by Bump.sh\\n \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n  \\n            Retrieval of the trusted beneficiaries list\\n\\n\\n\\n\\n\\n    GET\\n  \\n\\n    /api/v1/trusted-beneficiaries\\n  \\n\\n\\n\\n\\n        oauth\\n \\n\\n\\n\\n\\n\\n  \\n        Headers\\n\\n\\n\\n\\n\\n\\n\\n  \\n      X-Request-ID\\n\\n string\\nRequired\\n\\nCorrelation header to be set in a request and retrieved in the relevant response\\n\\n\\n\\n\\n\\n\\n\\n  \\n      Responses\\n\\n \\n\\n\\n\\n\\n\\n  \\n            200\\n\\n \\n\\n\\nHalTrustedBeneficiaries\\n\\n\\n\\n\\nHide response attributes\\nShow response attributes\\nobject\\n\\n\\n\\n\\n\\n\\n  \\n      _links\\n\\n Elixir.OpenBankingWeb.Schemas.HalLinks\\nRequired\\n\\nHAL Links\\n\\n\\n\\n\\n\\n  \\n      beneficiaries\\n\\n array[object]\\nRequired\\n\\nOne owner of user account\\n\\n\\n\\nHide beneficiaries attributes\\nShow beneficiaries attributes\\narray[object]\\n\\n\\n\\n\\n\\n\\n  \\n      first_name\\n\\n string\\n\\nFirst name\\n\\n\\n\\n\\n\\n  \\n      full_name\\n\\n string\\nRequired\\n\\nFull name\\n\\n\\n\\n\\n\\n  \\n      last_name\\n\\n string\\n\\nLast name\\n\\n\\n\\n\\n\\n  \\n      name_prefix\\n\\n string\\n\\nName Prefix\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n        GET /api/v1/trusted-beneficiaries\\n\\n    \\n  \\n\\n\\n\\n\\ncurl \\\\\\n -X GET https://iban.nash.io/api/v1/trusted-beneficiaries \\\\\\n -H \\\"Authorization: Bearer $ACCESS_TOKEN\\\" \\\\\\n -H \\\"X-Request-ID: string\\\"\\n\\n\\n\\n\\n\\n        Response examples (200)\\n\\n    \\n  \\n\\n\\n\\n\\n\\n{\\n  \\\"_links\\\": {\\n    \\\"self\\\": {\\n      \\\"href\\\": \\\"/v1/accounts\\\"\\n    }\\n  },\\n  \\\"beneficiaries\\\": [\\n    {\\n      \\\"creditor\\\": {\\n        \\\"currency\\\": \\\"EUR\\\",\\n        \\\"iban\\\": \\\"YY64COJH41059545330222956960771321\\\"\\n      },\\n      \\\"creditor_account\\\": {\\n        \\\"currency\\\": \\\"EUR\\\",\\n        \\\"iban\\\": \\\"YY64COJH41059545330222956960771321\\\"\\n      },\\n      \\\"id\\\": \\\"69581b46-bcc4-4361-b471-69205f24bc56\\\",\\n      \\\"is_trusted\\\": true\\n    }\\n  ]\\n}\\n\\n\\n\\n\\n\\n\\n        Response examples (200)\\n\\n    \\n  \\n\\n\\n\\n\\n\\n{\\n  \\\"_links\\\": {\\n    \\\"self\\\": {\\n      \\\"href\\\": \\\"/v1/accounts\\\"\\n    }\\n  },\\n  \\\"beneficiaries\\\": [\\n    {\\n      \\\"id\\\": \\\"69581b46-bcc4-4361-b471-69205f24bc56\\\",\\n      \\\"creditor\\\": {\\n        \\\"iban\\\": \\\"YY64COJH41059545330222956960771321\\\",\\n        \\\"currency\\\": \\\"EUR\\\"\\n      },\\n      \\\"is_trusted\\\": true,\\n      \\\"creditor_account\\\": {\\n        \\\"iban\\\": \\\"YY64COJH41059545330222956960771321\\\",\\n        \\\"currency\\\": \\\"EUR\\\"\\n      }\\n    }\\n  ]\\n}\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n  \\n          PISP\\n\\n\\nDismiss highlight\\n\\n\\nPayment Initiation Service Provider.\\nPayment initiation is done using the integrated OAuth2 authentication flow described in PSD2\\nspecifications.\\nThis means you first have to initiate a payment using the dedicated endpoint, then redirect the PSU to our\\nauthorisation page following the link present in the response.\\nAfter performing a strong customer authentication, the PSU will be redirected to your redirect URI with an\\nauthorisation code that you can then exchange for an access token.\\nThis access token is only needed to cancel a payment on behalf a PSU (this does not require a strong\\ncustomer authentication). It is not needed to retrieve the current status of a payment.\",\"textTemplate\":\"\",\"endCharIdx\":3762,\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\",\"hash\":\"f1C0HAWafquNU2yR2p2QSkeQz8Gh/sXJlTRbocIB3kM=\"}","__type__":"TEXT"},"ed4261a7-7f16-4da2-aadc-3eaebb2f13c4":{"__data__":"{\"id_\":\"ed4261a7-7f16-4da2-aadc-3eaebb2f13c4\",\"metadata\":{\"url\":\"https://docs.iban.nash.io/authentication\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"3da88b8a-0ae9-4e81-92e8-5245bf5450ed\",\"metadata\":{\"url\":\"https://docs.iban.nash.io/authentication\"},\"hash\":\"y7HtRRa7ai74p4qVcRLIBCzH3xEzbxNP1Ak5kn65RjI=\"}},\"text\":\"Authentication | nash iban API documentation\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n    nash iban\\n\\nShow Menu\\n\\n\\n\\n\\n\\n\\n\\nSearch…\\nCtrl+K\\n\\n\\n\\n\\n\\n\\n\\nESC\\n\\n\\n\\n\\n\\n\\n\\n\\nToggle dark mode\\n\\nAPI Changelog\\n\\n\\n\\n\\n              Download source\\n\\n      \\n\\n\\n\\n\\n\\nJSON OpenAPI specification\\n\\n\\nYAML OpenAPI specification\\n\\n\\n\\n\\n\\n\\nTopics\\n\\n\\nIntroduction\\n\\n\\nAuthentication\\n\\n\\nOnboarding\\n\\n\\nEndpoints\\n\\n\\n\\n    AISP\\n \\n\\n\\n    Retrieval of the PSU accounts\\n      GET\\n\\n\\n\\n    Retrieval of an account balances report\\n      GET\\n\\n\\n\\n    Retrieval of an account overdraft\\n      GET\\n\\n\\n\\n    Retrieval of an account owners\\n      GET\\n\\n\\n\\n    Retrieval of an account transaction set\\n      GET\\n\\n\\n\\n    Retrieval of transaction details\\n      GET\\n\\n\\n\\n    Forwarding the PSU consent\\n      PUT\\n\\n\\n\\n    Retrieval of the identity of the end-user\\n      GET\\n\\n\\n\\n    Retrieval of the trusted beneficiaries list\\n      GET\\n\\n\\n\\n\\n\\n    PISP\\n \\n\\n\\n    Request a payment\\n      POST\\n\\n\\n\\n\\n\\n    CBPII\\n \\n\\n\\n    Confirm funds\\n      POST\\n\\n\\n\\n\\n\\n    Token\\n \\n\\n\\n    Get access token\\n      GET\\n\\n\\n\\n\\n\\n\\n\\n\\n\\nPowered by Bump.sh\\n \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n  \\n        IBAN Interface\\n\\n 0.1\\n\\n\\n\\n\\n\\n        Base URL\\n\\n    \\n  \\n\\n\\n\\n\\nhttps://iban.nash.io\\n\\n\\n\\n\\nNash IBAN PSD2 API allows Third Party Providers to access account information and initiate payments on behalf of customers.\\nThe API follows PSD2 API V1.6 Guidelines. This document describe our implementation choices and where we have drifted away from the guidelines.\\nAll non-absolute paths described in this document are relatives to the base URL of the server (e.g. https://iban.nash.io for the production environment).\\n\\nThis is version 0.1 of this API documentation.\\n Last update on Jul 10, 2023.\\n\\n\\n\\n\\n\\n  \\n        Authentication\\n\\n\\nDismiss highlight\\n\\n\\n\\n\\n\\n\\n  \\n                oauth (oauth2)\\n\\n \\nAuthenticate with OAuth 2\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n  \\n        Onboarding\\n\\n \\n\\n\\nFor TPPs to be able to make a request on the API, they must follow the onboarding process.\\nFor that, it is required from them to send us an email with the following  elements :\\n\\none or more redirect URI for OAuth2 authentication\\na valid QSealC certificate\\n\\nIn exchange of what they will receive a client_id and a client_secret to be used with OAuth2 authentication.\",\"textTemplate\":\"\",\"endCharIdx\":2151,\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\",\"hash\":\"MxuwwLXup7Po/ECIRTvErePDVke5m3sY4EvduoERfz8=\"}","__type__":"TEXT"},"896e2212-7bcb-4feb-a25e-66329bb07868":{"__data__":"{\"id_\":\"896e2212-7bcb-4feb-a25e-66329bb07868\",\"metadata\":{\"url\":\"https://docs.iban.nash.io/group/endpoint-aisp\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"af4c4607-2974-41f8-bed1-24b4f48905b4\",\"metadata\":{\"url\":\"https://docs.iban.nash.io/group/endpoint-aisp\"},\"hash\":\"xQZonrBBexN/Gg0Sy8u3Pau8D75EE1mye0Qd13/C6pk=\"}},\"text\":\"AISP | nash iban API documentation\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n    nash iban\\n\\nShow Menu\\n\\n\\n\\n\\n\\n\\n\\nSearch…\\nCtrl+K\\n\\n\\n\\n\\n\\n\\n\\nESC\\n\\n\\n\\n\\n\\n\\n\\n\\nToggle dark mode\\n\\nAPI Changelog\\n\\n\\n\\n\\n              Download source\\n\\n      \\n\\n\\n\\n\\n\\nJSON OpenAPI specification\\n\\n\\nYAML OpenAPI specification\\n\\n\\n\\n\\n\\n\\nTopics\\n\\n\\nIntroduction\\n\\n\\nAuthentication\\n\\n\\nOnboarding\\n\\n\\nEndpoints\\n\\n\\n\\n    AISP\\n \\n\\n\\n    Retrieval of the PSU accounts\\n      GET\\n\\n\\n\\n    Retrieval of an account balances report\\n      GET\\n\\n\\n\\n    Retrieval of an account overdraft\\n      GET\\n\\n\\n\\n    Retrieval of an account owners\\n      GET\\n\\n\\n\\n    Retrieval of an account transaction set\\n      GET\\n\\n\\n\\n    Retrieval of transaction details\\n      GET\\n\\n\\n\\n    Forwarding the PSU consent\\n      PUT\\n\\n\\n\\n    Retrieval of the identity of the end-user\\n      GET\\n\\n\\n\\n    Retrieval of the trusted beneficiaries list\\n      GET\\n\\n\\n\\n\\n\\n    PISP\\n \\n\\n\\n    Request a payment\\n      POST\\n\\n\\n\\n\\n\\n    CBPII\\n \\n\\n\\n    Confirm funds\\n      POST\\n\\n\\n\\n\\n\\n    Token\\n \\n\\n\\n    Get access token\\n      GET\\n\\n\\n\\n\\n\\n\\n\\n\\n\\nPowered by Bump.sh\\n \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n  \\n        Onboarding\\n\\n \\n\\n\\nFor TPPs to be able to make a request on the API, they must follow the onboarding process.\\nFor that, it is required from them to send us an email with the following  elements :\\n\\none or more redirect URI for OAuth2 authentication\\na valid QSealC certificate\\n\\nIn exchange of what they will receive a client_id and a client_secret to be used with OAuth2 authentication.\\n\\n\\n\\n\\n\\n\\n\\n\\n  \\n          AISP\\n\\n\\nDismiss highlight\\n\\n\\nAccount Information Service Provider.\\nConsent is given using the OAuth2 as a pre-step authentication flow described in PSD2 specifications.\\nThis means you don't have to manage consents using the dedicated endpoints (which are not implemented),\\nbut only to redirect the PSU to our authorisation page (using AISP as OAuth2 scope).\\nAfter performing a strong customer authentication, the PSU will be redirected to your redirect URI with an\\nauthorisation code that you can then exchange for an access token.\\nThis access token will let you authenticate at the XS2A interface to request the PSU accounts balances and\\ntransactions history.\",\"textTemplate\":\"\",\"endCharIdx\":2099,\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\",\"hash\":\"VzK4eByynNwhFckoDEVfWvc15M4npvCvzAFPoBU3eyM=\"}","__type__":"TEXT"}},"docstore/metadata":{"80f17682-6ee3-4c21-951b-e3fdb3c1f5dd":{"docHash":"Cvy5fq8v12XA21acg9ToJ5XhfVHW+BgChOA92W8ejtk="},"1d3783fb-d720-48a8-8bd9-546203337d83":{"docHash":"2sOsC1aKEydpK2HX+OVkoKrB/6Lvg1/8VnWFc0Wj7QI="},"a769b651-2a48-46e4-a67b-229eb9964a96":{"docHash":"8MGSvVVzSOUycJAFkfMDreiNF2aaepMVfncV/OuQp08="},"3da88b8a-0ae9-4e81-92e8-5245bf5450ed":{"docHash":"y7HtRRa7ai74p4qVcRLIBCzH3xEzbxNP1Ak5kn65RjI="},"af4c4607-2974-41f8-bed1-24b4f48905b4":{"docHash":"xQZonrBBexN/Gg0Sy8u3Pau8D75EE1mye0Qd13/C6pk="},"c7107352-878c-4b7c-808e-1b293f7bb2b0":{"docHash":"07W9A4TbG27BCeLErpS6oN1noOqv8OPJlQArrSsqPyo=","refDocId":"80f17682-6ee3-4c21-951b-e3fdb3c1f5dd"},"049b31e6-8d6d-43d5-8b2b-43ddc56c4a98":{"docHash":"j3mBmlGssDAmvPNeqcDxiPQCwAcPEWAWTXvV2nJL3dc=","refDocId":"80f17682-6ee3-4c21-951b-e3fdb3c1f5dd"},"123be561-7ccb-42f8-823f-dfba0a4ff2fa":{"docHash":"SGgVfuswFuvBqJpcnXZJCx06GFMAFtw8HJcicNpMbAQ=","refDocId":"80f17682-6ee3-4c21-951b-e3fdb3c1f5dd"},"cae8dab0-895b-4c55-a0f6-5ba43cbc7066":{"docHash":"Q7L9RCbSPG39/7CIYsc6apj1yn/8FtSfgWApTZZRPBE=","refDocId":"80f17682-6ee3-4c21-951b-e3fdb3c1f5dd"},"ee3079de-438a-43fd-9b37-ecbf84a8b93e":{"docHash":"iZu+ZiYErqESGMf0ThZP2xd1kECiV+5JWl23L3zFuNg=","refDocId":"80f17682-6ee3-4c21-951b-e3fdb3c1f5dd"},"148c7c52-99fb-4f8d-9d0b-30bdfe24ad31":{"docHash":"zsm8YNbmPz9f/Y711IPfIlgkMNfEIfOqD2rOzM5ZlQU=","refDocId":"80f17682-6ee3-4c21-951b-e3fdb3c1f5dd"},"bd303941-edd9-4a89-96dd-e8d71df93659":{"docHash":"GFIagPNqMf+WKdm1AZpM2KP4RGJKsXiATvZIBc+UQEU=","refDocId":"80f17682-6ee3-4c21-951b-e3fdb3c1f5dd"},"28c7aaec-d1c5-4df2-90cd-92d4d61e7e38":{"docHash":"XAhth/xxwznf07qOFs9oT93bzPapiBOvQWd9ebtdoYI=","refDocId":"1d3783fb-d720-48a8-8bd9-546203337d83"},"7e350a4d-a17f-4262-8f85-302de4ae2d65":{"docHash":"f1C0HAWafquNU2yR2p2QSkeQz8Gh/sXJlTRbocIB3kM=","refDocId":"a769b651-2a48-46e4-a67b-229eb9964a96"},"ed4261a7-7f16-4da2-aadc-3eaebb2f13c4":{"docHash":"MxuwwLXup7Po/ECIRTvErePDVke5m3sY4EvduoERfz8=","refDocId":"3da88b8a-0ae9-4e81-92e8-5245bf5450ed"},"896e2212-7bcb-4feb-a25e-66329bb07868":{"docHash":"VzK4eByynNwhFckoDEVfWvc15M4npvCvzAFPoBU3eyM=","refDocId":"af4c4607-2974-41f8-bed1-24b4f48905b4"}},"docstore/ref_doc_info":{"80f17682-6ee3-4c21-951b-e3fdb3c1f5dd":{"nodeIds":["c7107352-878c-4b7c-808e-1b293f7bb2b0","049b31e6-8d6d-43d5-8b2b-43ddc56c4a98","123be561-7ccb-42f8-823f-dfba0a4ff2fa","cae8dab0-895b-4c55-a0f6-5ba43cbc7066","ee3079de-438a-43fd-9b37-ecbf84a8b93e","148c7c52-99fb-4f8d-9d0b-30bdfe24ad31","bd303941-edd9-4a89-96dd-e8d71df93659"],"extraInfo":{}},"1d3783fb-d720-48a8-8bd9-546203337d83":{"nodeIds":["28c7aaec-d1c5-4df2-90cd-92d4d61e7e38"],"extraInfo":{}},"a769b651-2a48-46e4-a67b-229eb9964a96":{"nodeIds":["7e350a4d-a17f-4262-8f85-302de4ae2d65"],"extraInfo":{}},"3da88b8a-0ae9-4e81-92e8-5245bf5450ed":{"nodeIds":["ed4261a7-7f16-4da2-aadc-3eaebb2f13c4"],"extraInfo":{}},"af4c4607-2974-41f8-bed1-24b4f48905b4":{"nodeIds":["896e2212-7bcb-4feb-a25e-66329bb07868"],"extraInfo":{}}}}